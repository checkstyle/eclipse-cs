ABSTRACT = abstract keyword
ANNOTATION = A Annotation
ANNOTATION_ARRAY_INIT = Annotation array member initialization
ANNOTATION_DEF = Annotation declaration
ANNOTATION_FIELD_DEF = Annotation field declaration
ANNOTATION_MEMBER_VALUE_PAIR = Annotation member-value-pair
ANNOTATIONS = Annotation list
ARRAY_DECLARATOR = Array declaration
ARRAY_INIT = Array initialization
ASSIGN = "=" - Assignment operator
AT = "@" - At symbol
BAND = "&" - Bitwise AND operator
BAND_ASSIGN = "&=" - Bitwise AND assignment operator
BNOT = "~" - Bitwise complement operator
BOR = "|" - Bitwise OR operator
BOR_ASSIGN = "|=" - Bitwise OR assignment operator
BSR = ">>>" - Unsigned shift right operator
BSR_ASSIGN = ">>>=" - Unsigned right shift assignment operator
BXOR = "^" - Bitwise exclusive OR operator
BXOR_ASSIGN = "^=" - Bitwise exclusive OR assignment operator
CASE_GROUP = Group of case clauses
CHAR_LITERAL = Character literal
CLASS_DEF = Class declaration
COLON = ":" - Colon operator
COMMA = "," - Comma operator
CTOR_CALL = Constructor call
CTOR_DEF = Constructor declaration
DEC = "--" - Prefix decrement operator
DIV = "/" - Division operator
DIV_ASSIGN = "/=" - Division assignment operator
DO_WHILE = Literal "while" in do-while loop
DOT = "." - Dot operator
DOUBLE_COLON = Java 8 double colon (::)
ELIST = Expression list
ELLIPSIS = "..." - Triple dot for variable-length parameters
EMPTY_STAT = Empty statement
ENUM = enum keyword
ENUM_CONSTANT_DEF = Enum constant declaration
ENUM_DEF = Enum declaration
EOF = End of file
EQUAL = "==" - Equal operator
EXPR = Expression
EXTENDS_CLAUSE = Extends clause
FINAL = Final keyword
FOR_CONDITION = For loop condition
FOR_EACH_CLAUSE = For-each clause
FOR_INIT = For loop initializer
FOR_ITERATOR = For loop iterator
GE = ">=" - Greater than or equal operator
GENERIC_END = ">" - End of generic type arguments
GENERIC_START = "<" - Start of generic type arguments
GT = ">" - Greater than operator
IDENT = An identifier
IMPLEMENTS_CLAUSE = Implements clause
IMPORT = Import declaration
INC = "++" - Prefix increment operator
INDEX_OP = Array index operator
INSTANCE_INIT = Instance initializer
INTERFACE_DEF = Interface declaration
LABELED_STAT = Labeled statement
LAMBDA = Java 8 Lambda symbol
LAND = "&&" - Logical AND operator
LCURLY = "{" - Left curly brace
LE = "<=" - Less than or equals operator
LITERAL_ASSERT = assert keyword
LITERAL_BOOLEAN = boolean keyword
LITERAL_BREAK = break keyword
LITERAL_BYTE = byte keyword
LITERAL_CASE = case keyword
LITERAL_CATCH = catch keyword
LITERAL_CHAR = char keyword
LITERAL_CLASS = class keyword
LITERAL_CONTINUE = continue keyword
LITERAL_DEFAULT = default keyword
LITERAL_DO = do keyword
LITERAL_DOUBLE = double keyword
LITERAL_ELSE = else keyword
LITERAL_FALSE = false keyword
LITERAL_FINALLY = finally keyword
LITERAL_FLOAT = float keyword
LITERAL_FOR = for keyword
LITERAL_IF = if keyword
LITERAL_INSTANCEOF = instanceof operator
LITERAL_INT = int keyword
LITERAL_INTERFACE = interface keyword
LITERAL_LONG = long keyword
LITERAL_NATIVE = native keyword
LITERAL_NEW = new keyword
LITERAL_NULL = null keyword
LITERAL_PRIVATE = private keyword
LITERAL_PROTECTED = protected keyword
LITERAL_PUBLIC = public keyword
LITERAL_RETURN = return keyword
LITERAL_SHORT = short keyword
LITERAL_STATIC = static keyword
LITERAL_SUPER = super keyword
LITERAL_SWITCH = switch keyword
LITERAL_SYNCHRONIZED = synchronized keyword
LITERAL_THIS = this keyword
LITERAL_THROW = throw keyword
LITERAL_THROWS = throws keyword
LITERAL_TRANSIENT = transient keyword
LITERAL_TRUE = true keyword
LITERAL_TRY = try keyword
LITERAL_VOID = void keyword
LITERAL_VOLATILE = volatile keyword
LITERAL_WHILE = while keyword
LNOT = "!" - Logical complement operator
LOR = "||" - Logical OR operator
LPAREN = "(" - Left parenthesis
LT = "<" - Less than operator
METHOD_CALL = Method call
METHOD_DEF = Method declaration
METHOD_REF = Java 8 method reference
MINUS = "-" - Subtraction operator
MINUS_ASSIGN = "-=" - Subtraction assignment operator
MOD = "%" - Remainder operator
MOD_ASSIGN = "%=" - Remainder assignment operator
MODIFIERS = Modifier list
NOT_EQUAL = "!=" - Not equal operator
NUM_DOUBLE = Double literal
NUM_FLOAT = Float literal
NUM_INT = Integer literal
NUM_LONG = Long literal
OBJBLOCK = Object block
PACKAGE_DEF = Package declaration
PARAMETER_DEF = Parameter declaration
PARAMETERS = Parameter list
PATTERN_VARIABLE_DEF = Pattern variable definition
PLUS = "+" - Addition operator
PLUS_ASSIGN = "+=" - Addition assignment operator
POST_DEC = "--" - Postfix decrement operator
POST_INC = "++" - Postfix increment operator
QUESTION = "?" - Inline Conditional operator
RBRACK = "]" - The ] symbol
RCURLY = "}" - Right curly brace
RESOURCE = A single resource in a try-with-resources construct
RESOURCE_SPECIFICATION = Java 7 try-with-resources
RESOURCES = Resources in a try-with-resources construct
RPAREN = ")" - Right parenthesis
SEMI = ";" - Semicolon
SL = "<<" - Shift left operator
SL_ASSIGN = "<<=" - Left shift assignment operator
SLIST = Statement list
SR = ">>" - Signed shift right operator
SR_ASSIGN = ">>=" - Signed right shift assignment operator
STAR = "*" - Multiplication operator
STAR_ASSIGN = "*=" - Multiplication assignment operator
STATIC_IMPORT = Static import declaration
STATIC_INIT = Static initializer
STRICTFP = strictfp keyword
STRING_LITERAL = String literal
SUPER_CTOR_CALL = Super constructor call
TYPE = A type
TYPE_ARGUMENT = A type argument
TYPE_ARGUMENTS = Type arguments list
TYPE_EXTENSION_AND = "&" - AND symbol in generic constraint
TYPE_LOWER_BOUNDS = Lower bounds type argument
TYPE_PARAMETER = A type parameter
TYPE_PARAMETERS = Type parameters list
TYPE_UPPER_BOUNDS = Upper bounds type argument
TYPECAST = Type-cast
UNARY_MINUS = "-" - Unary minus operator
UNARY_PLUS = "+" - Unary plus operator
VARIABLE_DEF = Variable declaration
WILDCARD_TYPE = Type that refers to all types
