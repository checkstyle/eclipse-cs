<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        https://checkstyle.org/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <!--
    This is a configuration copied from the main Checkstyle project.
    Unfortunately the Eclipse-CS code hasn't followed its own principles for a long time.
    Therefore this configuration has been stripped down to get rid of any warning first.
    The plan is to re-add check by check, together with the necessary fixes in the Java code.
    However, that also requires to first align the Eclipse formatter settings and the
    Checkstyle configuration and then to reformat all the sources once.
    -->

    <metadata name="org.checkstyle.principle" value="Practice What You Preach"/>
    <metadata name="org.checkstyle.principle.description"
              value="In our config we should use all Checks that Checkstyle has"/>

    <property name="cacheFile" value="${checkstyle.cache.file}"/>

    <property name="severity" value="error"/>

    <property name="fileExtensions" value="java, properties, xml, vm, g, g4, dtd"/>

    <!-- BeforeExecutionFileFilters is required for sources that are based on java9 -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$" />
    </module>

    <!-- Filters -->
    <module name="SeverityMatchFilter">
        <!-- report all violations except ignore -->
        <property name="severity" value="ignore"/>
        <property name="acceptOnMatch" value="false"/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}"/>
    </module>
    <!-- Tone down the checking for test code -->
    <module name="SuppressionSingleFilter">
        <property name="checks" value="JavadocPackage"/>
        <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
    </module>
    <module name="SuppressionSingleFilter">
        <property name="checks" value="JavadocMethod"/>
        <property name="files" value=".*[\\/]src[\\/](test|it)[\\/].*(?&lt;!Support)\.java"/>
    </module>
    <module name="SuppressWarningsFilter"/>
    <module name="SuppressWithPlainTextCommentFilter">
        <!--
          Use suppressions.xml for suppressions, this is only example.
          checkFormat will prevent suppression comments from being valid.
        -->
        <property name="checkFormat" value="IGNORETHIS"/>
        <property name="offCommentFormat" value="CSOFF\: .*"/>
        <property name="onCommentFormat" value="CSON\: .*"/>
    </module>

    <!-- Headers -->
    <module name="RegexpHeader">
        <property name="id" value="regexpHeader"/>
        <property name="headerFile" value="${checkstyle.regexp.header.file}"/>
        <property name="fileExtensions" value="java, g4"/>
    </module>
    <module name="RegexpHeader">
        <property name="id" value="oldRegexpHeader"/>
        <property name="headerFile" value="${checkstyle.regexp.old.header.file}"/>
        <property name="fileExtensions" value="java, g4"/>
    </module>

    <!-- Miscellaneous -->
    <module name="NewlineAtEndOfFile"/>
    <module name="Translation"/>
    <module name="UniqueProperties"/>
    <module name="OrderedProperties" />

    <!-- Regexp -->
    <module name="RegexpMultiline">
        <property name="id" value="regexpMultilineDefault"/>
    </module>
    <module name="RegexpMultiline">
        <property name="id" value="noEmptyFile"/>
        <property name="format" value="^\s*$" />
        <property name="matchAcrossLines" value="true" />
        <property name="message" value="Empty file is not allowed" />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noTrailingWhitespace"/>
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Trailing whitespace is not allowed"/>
    </module>
    <!--
     Links to .dtd files should start with "/", "http://" or "https://",
     otherwise they will be broken after archiving the documentation.
     See https://github.com/checkstyle/checkstyle/issues/7340 for details.
    -->
    <module name="RegexpSingleline">
        <property name="id" value="noRelativeLinks"/>
        <property name="format" value="href=&quot;(?!\/|https?:\/\/).*?\.dtd&quot;"/>
        <property name="fileExtensions" value="xml, vm"/>
        <property name="message"
                  value="Relative links to DTD files are prohibited. Please use absolute path or uri instead."/>
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noSourceforgeNetLinks"/>
        <property name="format" value="checkstyle\.sourceforge\.net"/>
        <property name="message"
                  value="Old site links should not be used, please use https://checkstyle.org"/>
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noSourceforgeIoLinks"/>
        <property name="format" value="checkstyle\.sourceforge\.io"/>
        <property name="message"
                  value="Old site links should not be used, please use https://checkstyle.org"/>
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noPackageCommentWithOtherVisibility"/>
        <property name="format" value="/\*\s+package\s+\*/\s+(private|protected|public)"/>
        <property name="fileExtensions" value="java"/>
        <property name="message"
                  value="Package comment marker should not be used if other visibility is defined"/>
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="regexpOnFilenameWithSpace"/>
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="javaFileLocation"/>
        <property name="folderPattern" value="[\\/]src[\\/]\w+[\\/]java[\\/]"/>
        <property name="fileNamePattern" value="\.java$"/>
        <property name="match" value="false"/>
        <message key="regexp.filepath.mismatch"
                 value="Only java files should be located in the ''src/*/java'' folders."/>
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="xmlFileLocation"/>
        <property name="folderPattern" value="[\\/]src[\\/]xdocs[\\/]"/>
        <property name="fileNamePattern" value="\.(xml)|(vm)$"/>
        <property name="match" value="false"/>
        <message key="regexp.filepath.mismatch"
                 value="All files in the ''src/xdocs'' folder should have the ''xml'' or ''vm'' extension."/>
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="testFileLocation"/>
        <property name="folderPattern" value="[\\/]src[\\/]it[\\/]java[\\/]"/>
        <property name="fileNamePattern" value="^((\w+Test)|(\w+TestSupport)|(Abstract\w+))\.java$"/>
        <property name="match" value="false"/>
        <message key="regexp.filepath.mismatch"
                 value="All files in the ''src/it/java'' folder
                      should be named ''*Test.java'' or ''Abstract*.java''."/>
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="oldFsfAddress"/>
        <property name="format" value="\Q59 Temple Place\E"/>
        <property name="message"
                  value="The address of the FSF in licenses shall be ''51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA''."/>
    </module>

    <!-- Size Violations -->
    <module name="FileLength">
        <property name="fileExtensions" value="java"/>
    </module>

    <!-- Whitespace -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="false"/>
    </module>

    <module name="TreeWalker">
        <property name="tabWidth" value="4"/>

        <!-- Annotations -->
        <module name="AnnotationLocation">
            <property name="tokens" value="ANNOTATION_DEF"/>
            <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
            <property name="tokens" value="PACKAGE_DEF"/>
            <property name="tokens" value="ENUM_CONSTANT_DEF"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
        </module>
        <module name="AnnotationOnSameLine">
            <!-- we can not use it as it conflicts with AnnotationLocation -->
            <property name="severity" value="ignore"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="tokens" value="CTOR_DEF"/>
            <property name="tokens" value="TYPECAST"/>
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="tokens" value="ENUM_DEF"/>
            <property name="tokens" value="INTERFACE_DEF"/>
            <property name="tokens" value="TYPE_ARGUMENT"/>
            <property name="tokens" value="ANNOTATION_DEF"/>
            <property name="tokens" value="LITERAL_NEW"/>
            <property name="tokens" value="LITERAL_THROWS"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="tokens" value="PARAMETER_DEF"/>
            <property name="tokens" value="IMPLEMENTS_CLAUSE"/>
            <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
            <property name="tokens" value="RECORD_DEF"/>
            <property name="tokens" value="COMPACT_CTOR_DEF"/>
        </module>
        <module name="AnnotationUseStyle"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="PackageAnnotation"/>
        <module name="SuppressWarningsHolder"/>

        <!-- Block Checks -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyCatchBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <!-- modified -->
        <module name="HideUtilityClassConstructor"/>
        <module name="InnerTypeLast"/>
        <module name="InterfaceIsType"/>
        <module name="MutableException"/>
        <module name="OneTopLevelClass"/>
        <module name="ThrowsCount">
            <property name="max" value="2"/>
        </module>

        <!-- Coding -->
        <module name="ArrayTrailingComma"/>
        <module name="AvoidDoubleBraceInitialization"/>
        <module name="AvoidNoArgumentSuperConstructorCall"/>
        <module name="CovariantEquals"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="FallThrough"/>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="IllegalInstantiation">
            <property name="classes"
                      value="org.xml.sax.SAXException, org.xml.sax.SAXParseException,
                         org.apache.commons.beanutils.ConversionException,
                         org.antlr.v4.runtime.misc.ParseCancellationException,
                         java.lang.StringBuffer"/>
        </module>
        <module name="IllegalThrows"/>
        <module name="IllegalToken">
            <property name="tokens" value="LABELED_STAT"/>
            <property name="tokens" value="LITERAL_NATIVE"/>
            <property name="tokens" value="LITERAL_VOLATILE"/>
            <property name="tokens" value="LITERAL_ASSERT"/>
        </module>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL"/>
            <property name="format" value="^(US-ASCII|ISO-8859-1|UTF-8|UTF-16BE|UTF-16LE|UTF-16)$"/>
            <property name="ignoreCase" value="true"/>
        </module>
        <module name="InnerAssignment"/>
        <module name="MissingCtor">
            <!--
              we will not use that fanatic validation, extra code is not good
              But this Check will exists as it was created by community demand.
            -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedTryDepth"/>
        <module name="NoArrayTrailingComma">
            <!-- This Check is conflicting with ArrayTrailingComma -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="NoCodeInFile"/>
        <module name="NoEnumTrailingComma">
            <!-- This Check is conflicting with our vision of code
                 to be same as ArrayTrailingComma requires it -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterAssignment"/>
        <module name="RequireThis"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <module name="UnnecessarySemicolonInEnumeration"/>
        <module name="UnusedLocalVariable"/>
        <module name="VariableDeclarationUsageDistance"/>

        <!-- Filters -->
        <module name="SuppressionCommentFilter">
            <!--
              Use suppressions.xml for suppressions, this is only example.
              checkFormat will prevent suppression comments from being valid.
            -->
            <property name="checkFormat" value="IGNORETHIS"/>
            <property name="offCommentFormat" value="CSOFF\: .*"/>
            <property name="onCommentFormat" value="CSON\: .*"/>
        </module>
        <module name="SuppressionXpathFilter">
            <property name="file" value="${checkstyle.suppressions-xpath.file}"/>
        </module>
        <!-- Tone down the checking for test code -->
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value="[\\/]internal[\\/].*[\\/]\w+Util\.java"/>
            <property name="checks" value="IllegalCatch"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/]test[\\/]"/>
            <property name="checks" value="EmptyBlock"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="JavadocVariable"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="JavadocType"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="MagicNumber"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="AvoidStaticImport"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="WriteTag"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="MethodCount"/>
        </module>
        <!-- Fixing these cases will decrease code readability -->
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/](test|it)[\\/]"/>
            <property name="checks" value="MultipleStringLiterals"/>
        </module>
        <module name="SuppressWithNearbyCommentFilter">
            <property name="commentFormat"
                      value="-@cs\[(\w{8,}(\|\w{8,})*)\] \w[\(\)\-\.\'\`\,\:\;\w ]{10,}"/>
            <property name="checkFormat" value="$1"/>
            <property name="influenceFormat" value="3"/>
        </module>

        <!-- Imports -->
        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport"/>
        <module name="IllegalImport"/>
        <module name="ImportControl">
            <property name="id" value="ImportControlMain"/>
            <property name="file" value="${checkstyle.importcontrol.file}"/>
            <property name="path" value="^.*[\\/]src[\\/]main[\\/].*$"/>
        </module>
        <module name="ImportControl">
            <property name="id" value="ImportControlTest"/>
            <property name="file" value="${checkstyle.importcontroltest.file}"/>
            <property name="path" value="^.*[\\/]src[\\/](test|it)[\\/].*$"/>
        </module>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Javadoc Comments -->
        <module name="JavadocBlockTagLocation">
            <!-- default tags -->
            <property name="tags" value="author, deprecated, exception, hidden, param, provides"/>
            <property name="tags" value="return, see, serial, serialData, serialField, since, throws"/>
            <property name="tags" value="uses, version"/>
            <!-- additional tags used in the project -->
            <property name="tags" value="noinspection"/>
        </module>
        <module name="JavadocContentLocation"/>
        <module name="JavadocMissingLeadingAsterisk"/>
        <module name="JavadocMissingWhitespaceAfterAsterisk"/>
        <module name="JavadocStyle">
            <property name="scope" value="public"/>
        </module>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="SingleLineJavadoc"/>
        <!-- Misc -->
        <module name="ArrayTypeStyle"/>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowIfAllCharactersEscaped" value="true"/>
        </module>
        <module name="CommentsIndentation"/>
        <module name="DescendantToken"/>
        <module name="FinalParameters">
            <!--
              we will not use that fanatic validation, extra modifiers pollute a code
              it is better to use extra validation(Check) that argument is reassigned
              But this Check will exists as it was created by community demand.
            -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="OuterTypeFilename"/>
        <module name="UncommentedMain">
            <property name="excludedClasses" value="\.(Main|JavadocPropertiesGenerator)$"/>
        </module>
        <module name="UpperEll"/>

        <!-- Modifiers -->
        <module name="ClassMemberImpliedModifier">
            <!-- effectively the opposite of RedundantModifier, so output must be ignored -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="InterfaceMemberImpliedModifier">
            <!-- effectively the opposite of RedundantModifier, so output must be ignored -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="ModifierOrder"/>

        <!-- Naming Conventions -->
        <module name="ClassTypeParameterName"/>
        <module name="RecordTypeParameterName"/>
        <module name="RecordComponentName"/>
        <module name="ConstantName"/>
        <module name="InterfaceTypeParameterName"/>
        <module name="LocalFinalVariableName"/>
        <module name="MemberName">
            <property name="format" value="^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$"/>
        </module>
        <module name="MethodName"/>
        <module name="MethodTypeParameterName"/>
        <module name="PackageName"/>
        <module name="ParameterName">
            <property name="format" value="^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$"/>
            <property name="ignoreOverridden" value="true"/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$"/>
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^(ex|[a-z][a-z][a-zA-Z]+)$"/>
        </module>
        <module name="PatternVariableName"/>

        <!-- Regexp -->
        <module name="Regexp">
            <property name="id" value="regexpDefault"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="regexpSingleLineDefault"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="checkASCII"/>
            <property name="format" value="[^\p{ASCII}]"/>
            <property name="ignoreComments" value="true"/>
        </module>

    <!-- Size Violations -->
        <module name="LambdaBodyLength"/>
        <module name="OuterTypeNumber"/>
        <module name="RecordComponentNumber"/>

        <!-- Whitespace -->
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoLineWrap"/>
        <module name="NoWhitespaceBefore"/>
        <module name="NoWhitespaceBeforeCaseDefaultColon"/>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="OperatorWrap">
            <property name="tokens" value="QUESTION"/>
            <property name="tokens" value="COLON"/>
            <property name="tokens" value="EQUAL"/>
            <property name="tokens" value="NOT_EQUAL"/>
            <property name="tokens" value="DIV"/>
            <property name="tokens" value="PLUS"/>
            <property name="tokens" value="MINUS"/>
            <property name="tokens" value="STAR"/>
            <property name="tokens" value="MOD"/>
            <property name="tokens" value="SR"/>
            <property name="tokens" value="BSR"/>
            <property name="tokens" value="GE"/>
            <property name="tokens" value="GT"/>
            <property name="tokens" value="SL"/>
            <property name="tokens" value="LE"/>
            <property name="tokens" value="LT"/>
            <property name="tokens" value="BXOR"/>
            <property name="tokens" value="BOR"/>
            <property name="tokens" value="LOR"/>
            <property name="tokens" value="BAND"/>
            <property name="tokens" value="LAND"/>
            <property name="tokens" value="TYPE_EXTENSION_AND"/>
            <property name="tokens" value="LITERAL_INSTANCEOF"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>
        <module name="ParenPad"/>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="AT"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="tokens" value="RBRACK"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="tokens" value="SEMI"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

    </module>

</module>