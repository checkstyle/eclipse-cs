
Regexp.group                        = Regexp

RegexpMultiline.desc       = A check for detecting multiple lines that match a supplied regular expression. Works with any file type.\r\n<br/><br/>\r\nRationale: This check can be used to prototype checks and to find common bad practice such as calling ex.printStacktrace(), System.out.println(), System.exit(), etc.
RegexpMultiline.format     = illegal pattern
RegexpMultiline.ignoreCase = Controls whether to ignore case when searching.
RegexpMultiline.maximum    = The maximum number of matches required in each file.
RegexpMultiline.message    = message which is used to notify about violations, if empty then default(hard-coded) message is used.
RegexpMultiline.minimum    = The minimum number of matches required in each file.
RegexpMultiline.name       = RegexpMultiline
RegexpMultiline.fileExtensions = file type extension of files to process

RegexpSingleline.desc               = A check for detecting single lines that match a supplied regular expression. Works with any file type.\r\n<br/><br/>\r\nRationale: This check can be used to prototype checks and to find common bad practice such as calling ex.printStacktrace(), System.out.println(), System.exit(), etc.
RegexpSingleline.format             = illegal pattern
RegexpSingleline.ignoreCase         = Controls whether to ignore case when searching.
RegexpSingleline.maximum            = The maximum number of matches required in each file.
RegexpSingleline.message            = message which is used to notify about violations, if empty then default(hard-coded) message is used.
RegexpSingleline.minimum            = The minimum number of matches required in each file.
RegexpSingleline.name               = RegexpSingleline
RegexpSingleline.fileExtensions     = file type extension of files to process

RegexpSinglelineJava.desc           = This class is variation on <code>RegexpSingleline</code> for detecting single lines that match a supplied regular expression in Java files. It supports suppressing matches in Java comments.
RegexpSinglelineJava.format         = illegal pattern
RegexpSinglelineJava.ignoreCase     = Controls whether to ignore case when searching.
RegexpSinglelineJava.ignoreComments = Controls whether to ignore text in comments when searching.
RegexpSinglelineJava.maximum        = The maximum number of matches required in each file.
RegexpSinglelineJava.message        = message which is used to notify about violations, if empty then default(hard-coded) message is used.
RegexpSinglelineJava.minimum        = The minimum number of matches required in each file.
RegexpSinglelineJava.name           = RegexpSingleLineJava

RegexpOnFilename.name = RegexpOnFilename
RegexpOnFilename.desc = Implementation of a check that looks for a file name and/or path match (or mis-match) against specified patterns. It can also be used to verify files match specific naming patterns not covered by other checks (Ex: properties, xml, etc.).<br/><br/>When customizing the check, the properties are applied in a specific order. The fileExtensions property first picks only files that match any of the specific extensions supplied. Once files are matched against the fileExtensions, the match property is then used in conjuction with the patterns to determine if the check is looking for a match or mis-match on those files. If the fileNamePattern is supplied, the matching is only applied to the fileNamePattern and not the folderPattern. If no fileNamePattern is supplied, then matching is applied to the folderPattern only and will result in all files in a folder to be reported on violations. If no folderPattern is supplied, then all folders that checkstyle finds are examined for violations. The ignoreFileNameExtensions property drops the file extension and applies the fileNamePattern only to the rest of file name. For example, if the file is named 'test.java' and this property is turned on, the pattern is only applied to 'test'.<br/><br/>If this check is configured with no properties, then the default behavior of this check is to report file names with spaces in them. When at least one pattern property is supplied, the entire check is under the user's control to allow them to fully customize the behavior.<br/><br/>It is recommended that if you create your own pattern, to also specify a custom error message. This allows the error message printed to be clear what the violation is, especially if multiple RegexpOnFilename checks are used. Argument 0 for the message populates the check's folderPattern. Argument 1 for the message populates the check's fileNamePattern. The file name is not passed as an argument since it is part of CheckStyle's default error messages.
RegexpOnFilename.folderPattern = Regular expression to match the folder path against.
RegexpOnFilename.fileNamePattern = Regular expression to match the file name against.
RegexpOnFilename.match = Whether to look for a match or mis-match on the file name, if the fileNamePattern is supplied, otherwise it is applied on the folderPattern.
RegexpOnFilename.ignoreFileNameExtensions = Whether to ignore the file extension for the file name match.
RegexpOnFilename.fileExtensions = File type extension of files to process. If this is specified, then only files that match these types are examined with the other patterns.

Regexp.desc           = A check that makes sure that a specified pattern exists, exists less than a set number of times, or does not exist in the file.<br/>\r\nThis check combines all the functionality provided by RegexpHeader, GenericIllegalRegexp and RequiredRegexp, except supplying the regular expression from a file.\r\n<br/>\r\nIt differs from them in that it works in multiline mode. It's regular expression can span multiple lines and it checks this against the whole file at once. The others work in singleline mode. Their single or multiple regular expressions can only span one line. They check each of these against each line in the file in turn.\r\n<br/>\r\nNote: Because of the different mode of operation there may be some changes in the regular expressions used to achieve a particular end.\r\n<br/>\r\nIn multiline mode...\r\n<ul>\r\n<li>^ means beginning of a line, as oposed to beginning of input.</li>\r\n<li>For beginning of input use \\A.</li>\r\n<li>$ means end of a line, as oposed to end of input.</li>\r\n<li>For end of input use \\Z.</li>\r\n<li>Each line in the file is terminated with a newline character.</li>\r\n</ul>\r\nNote: Not all regexp engines are created equal. Some provide extra functions that others do not and some elements of the syntax may vary. This check makes use of the java.util.regex package, please check its documentation for details of how to construct a regular expression to achive a particular goal.\r\n<br/>\r\nNote: When entering a regular expression as a parameter in the xml config file you must also take into account the xml rules. e.g. if you want to match a < symbol you need to enter &lt;. The regular expression should be entered on one line.
Regexp.duplicateLimit = Controls whether to check for duplicates of a required pattern, any negative value means no checking for duplicates, any positive value is used as the maximum number of allowed duplicates, if the limit is exceeded errors will be logged.
Regexp.errorLimit     = Controls the maximum number of errors before the check will abort.
Regexp.format         = Regular expression pattern.
Regexp.ignoreComments = Controls whether to ignore matches found within comments.
Regexp.illegalPattern = Controls whether the pattern is required or illegal.
Regexp.message        = message which is used to notify about violations, if empty then default(hard-coded) message is used.
Regexp.name           = Regexp
