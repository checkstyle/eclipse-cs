Metrics.group = Metrics

BooleanExpressionComplexity.desc   = Restrict the number of number of <code>&&, ||, &, |</code>  and <code>^</code> in an expression.<br/>\r\nRationale: Too many conditions leads to code that is difficult to read and hence debug and maintain.<br/>\r\nNote that the operators <code>&</code> and <code>|</code> are not only integer bitwise operators, they are also the non-shortcut versions of the boolean operators <code>&&</code> and <code>||</code>.
BooleanExpressionComplexity.max    = the maximum allowed number of boolean operations in one experession.
BooleanExpressionComplexity.name   = Boolean Expression Complexity
BooleanExpressionComplexity.tokens = tokens to check

ClassDataAbstractionCoupling.desc = This metric measures the number of instantiations of other classes within the given class. This type of coupling is not caused by inheritance or the object oriented paradigm. Generally speaking, any abstract data type with other abstract data types as members has data abstraction coupling; therefore, if a class has a local variable that is an instantiation (object) of another class, there is data abstraction coupling. The higher the DAC, the more complex the data structure (classes) of the system.
ClassDataAbstractionCoupling.max  = the maximum threshold allowed
ClassDataAbstractionCoupling.name = Class Data Abstraction Coupling
ClassDataAbstractionCoupling.excludedClasses = User-configured class names to ignore
ClassDataAbstractionCoupling.excludeClassesRegexps = User-configured regular expressions to ignore classes
ClassDataAbstractionCoupling.excludedPackages = User-configured packages to ignore

ClassFanOutComplexity.desc = The number of other classes a given class relies on. Also the square of this has been shown to indicate the amount of maintenence required in functional programs (on a file basis) at least.
ClassFanOutComplexity.max  = the maximum threshold allowed
ClassFanOutComplexity.name = Class Fan Out Complexity
ClassFanOutComplexity.excludedClasses = User-configured class names to ignore
ClassFanOutComplexity.excludeClassesRegexps = User-configured regular expressions to ignore classes
ClassFanOutComplexity.excludedPackages = User-configured packages to ignore

CyclomaticComplexity.desc = Checks cyclomatic complexity against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case  statements, and operators && and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!
CyclomaticComplexity.max  = the maximum threshold allowed
CyclomaticComplexity.name = Cyclomatic Complexity
CyclomaticComplexity.switchBlockAsSingleDecisionPoint = whether to treat the whole switch block as a single decision point
CyclomaticComplexity.tokens = tokens to check

JavaNCSS.classMaximum  = the maximum allowed number of non commenting lines in a class.
JavaNCSS.desc          = Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the  specification for the JavaNCSS-Tool  written by Chr. Clemens Lee.<br/>\r\nRougly said the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces.</br>\r\nThe NCSS for a class is summarized from the NCSS of all its methods, the NCSS of its nested classes and the number of member variable declarations.\r\nThe NCSS for a file is summarized from the ncss of all its top level classes, the number of imports and the package declaration.<br/>\r\nRationale: Too large methods and classes are hard to read and costly to maintain. A large NCSS number often means that a method or class has too many responsabilities and/or functionalities which should be decomposed into smaller units.
JavaNCSS.fileMaximum   = the maximum allowed number of non commenting lines in a file.
JavaNCSS.methodMaximum = the maximum allowed number of non commenting lines in a method.
JavaNCSS.name          = Non Commenting Source Statements

NPathComplexity.desc = The NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.).<br/>\r\nRationale: Nejmeh says that his group had an informal NPATH limit of 200 on individual routines; functions that exceeded this value were candidates for further decomposition - or at least a closer look.
NPathComplexity.max  = the maximum threshold allowed
NPathComplexity.name = NPath Complexity
