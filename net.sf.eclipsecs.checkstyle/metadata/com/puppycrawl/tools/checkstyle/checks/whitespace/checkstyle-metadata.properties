
EmptyForInitializerPad.desc   = Checks the padding of an empty for initializer; that is whether white space is required at an empty for initializer, or such white space is forbidden. No check occurs if there is a line wrap at the initializer, as in\r\n<pre>\r\nfor (\r\n      ; i < j; i++, j--)\r\n</pre>\r\n\u0009
EmptyForInitializerPad.name   = Empty For Initializer Pad
EmptyForInitializerPad.option = Policy on how to pad an empty for iterator.

EmptyForIteratorPad.desc   = Checks the padding of an empty for iterator; that is whether white space is required at an empty for iterator, or such white space is forbidden. No check occurs if there is a line wrap at the iterator, as in\r\n<pre>\r\nfor (Iterator foo = very.long.line.iterator();\r\n      foo.hasNext();\r\n     )\r\n</pre>\r\n\u0009\r\n\u0009\u0009
EmptyForIteratorPad.name   = Empty For Iterator Pad
EmptyForIteratorPad.option = Policy on how to pad an empty for iterator.

FileTabCharacter.desc     = Checks that there are no tab characters ('\\t') in the source code.<br/>\r\n<br/>\r\nRationale:<br/>\r\n<ul>\r\n<li>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</li>\r\n<li>From the Apache jakarta coding standards: In a distributed development environment, when the commit messages get sent to a mailing list, they are almost impossible to read if you use tabs.</li>\r\n</ul>\r\n
FileTabCharacter.eachLine = whether to report on each line containing a tab, or just the first instance
FileTabCharacter.name     = File Tab Character
FileTabCharacter.fileExtensions  = file type extension of files to process

GenericWhitespace.desc = Checks that the whitespace around the Generic tokens < and > is correct to the <em>typical</em> convention. The convention is not configurable. \r\n<br/><br/>\r\nFor example the following is legal: \r\n<pre>\r\nList<Integer> x = new ArrayList<Integer>();\r\nList<List<Integer>> y = new ArrayList<List<Integer>>();\r\n</pre>\r\nBut the following example is not:\r\n<pre>\r\nList < Integer > x = new ArrayList < Integer > ();\r\nList < List < Integer > > y = new ArrayList < List < Integer > > ();\r\n</pre>\r\n   \r\n
GenericWhitespace.name = Generic Whitespace

MethodParamPad.allowLineBreaks = whether a line break between the identifier and left parenthesis is allowed
MethodParamPad.desc            = Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. That is, if the identifier and left parenthesis are on the same line, checks whether a space is required immediately after the identifier or such a space is forbidden. If they are not on the same line, reports an error, unless configured to allow line breaks. To allow linebreaks after the identifier, set property <code>allowLineBreaks</code> to <code>true</code>.
MethodParamPad.name            = Method Parameter Pad
MethodParamPad.option          = policy on how to pad method parameter
MethodParamPad.tokens          = Tokens to check.

NoWhitespaceAfter.allowLineBreaks = Whether whitespace is allowed if the token is at a linebreak.
NoWhitespaceAfter.desc            = Checks that there is no whitespace after a token. More specifically, it checks that it is not followed by whitespace, or (if linebreaks are allowed) all characters on the line after are whitespace. To forbid linebreaks after a token, set property <code>allowLineBreaks</code> to <code>false</code>.
NoWhitespaceAfter.name            = No Whitespace After
NoWhitespaceAfter.tokens          = Tokens to check.

NoWhitespaceBefore.allowLineBreaks = Whether whitespace is allowed if the token is at a linebreak.
NoWhitespaceBefore.desc            = Checks that there is no whitespace before a token. More specifically, it checks that it is not preceded with whitespace, or (if linebreaks are allowed) all characters on the line before are whitespace. To allow linebreaks before a token, set property <code>allowLineBreaks</code> to <code>true</code>.
NoWhitespaceBefore.name            = No Whitespace Before
NoWhitespaceBefore.tokens          = Tokens to check.

OperatorWrap.desc   = Checks the policy on how to wrap lines on operators.
OperatorWrap.name   = Operator Wrap
OperatorWrap.option = Policy on how to wrap lines. nl = operator must be on a new line, eol = operator must be at the end of the line.
OperatorWrap.tokens = Tokens to check.

ParenPad.desc   = Checks the policy on the padding of parentheses; i.e. whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden.
ParenPad.name   = Paren Pad
ParenPad.option = Policy on how to pad parentheses. nospace = do not pad (e.g. method(a, b)).  space = ensure padding (e.g. method( a, b )).
ParenPad.tokens = Tokens to check.

TypecastParenPad.desc   = Checks the policy on the padding of parentheses for typecasts. That is, whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden.
TypecastParenPad.name   = Typecast Paren Pad
TypecastParenPad.option = Policy on how to pad parentheses. nospace = do not pad (e.g. method(a, b)).  space = ensure padding (e.g. method( a, b )).

Whitespace.group                        = Whitespace

WhitespaceAfter.desc   = Checks that a token is followed by whitespace.
WhitespaceAfter.name   = Whitespace After
WhitespaceAfter.tokens = Tokens to check.

WhitespaceAround.allowEmptyConstructors = allow empty constructor bodies
WhitespaceAround.allowEmptyMethods      = allow empty method bodies
WhitespaceAround.allowEmptyTypes        = allow empty class, interface and enum bodies
WhitespaceAround.allowEmptyLoops        = allow empty loop bodies
WhitespaceAround.allowEmptyLambdas      = allow empty lambda bodies
WhitespaceAround.allowEmptyCatches      = allow empty catch bodies
WhitespaceAround.desc                   = Checks that a token is surrounded by whitespace. Empty constructor and method bodies (blocks) of the form\r\n<pre>\r\npublic MyClass() {}      // empty constructor\r\npublic void func() {}    // empty method\r\n</pre>\r\nmay optionally be exempted from the policy using the <code>allowEmptyMethods</code> and <code>allowEmptyConstructors</code> properties.
WhitespaceAround.name                   = Whitespace Around
WhitespaceAround.tokens                 = Tokens to check.
WhitespaceAround.ignoreEnhancedForColon = Whether or not to ignore a colon in an enhanced for loop

EmptyLineSeparator.name = Empty Line Separator
EmptyLineSeparator.desc = Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers.
EmptyLineSeparator.tokens = assignments to check
EmptyLineSeparator.allowNoEmptyLineBetweenFields = Allow no empty line between fields
EmptyLineSeparator.allowMultipleEmptyLines = Allow multiple lines between fields
EmptyLineSeparator.allowMultipleEmptyLinesInsideClassMembers = Allow multiple empty lines inside class members

SeparatorWrap.name = Separator Wrap
SeparatorWrap.desc = Checks line wrapping with separators.
SeparatorWrap.option = policy on how to wrap lines
SeparatorWrap.tokens = tokens to check.

SingleSpaceSeparator.name = Single Space Separator
SingleSpaceSeparator.desc = Checks that non-whitespace characters are separated by no more than one whitespace. Separating characters by tabs or multiple spaces will be reported. Currently the check doesn't permit horizontal alignment. To inspect whitespaces before and after comments, set the property validateComments to true.
SingleSpaceSeparator.validateComments = If set to true, whitespaces surrounding comments will be ignored.

NoLineWrap.name = No Line Wrap
NoLineWrap.desc = Checks that chosen statements are not line-wrapped. By default this Check restricts wrapping import and package statements, but it's possible to check any statement.
NoLineWrap.tokens = tokens to check