
Javadoc.group                              = Javadoc Comments

JavadocMethod.minLineCount                 = Minimal amount of lines in method to demand documentation presence.
JavadocMethod.allowedAnnotations           = List of annotations that could allow missed documentation.
JavadocMethod.validateThrows               = Allows validating throws tags.
JavadocMethod.allowMissingJavadoc          = Whether to ignore errors when a method javadoc is missed
JavadocMethod.allowMissingParamTags        = Whether to ignore errors when a method has parameters but does not have matching param tags in the javadoc.
JavadocMethod.allowMissingPropertyJavadoc  = Whether to allow missing Javadoc on accessor methods for properties (setters and getters).
JavadocMethod.allowMissingReturnTag        = Whether to ignore errors when a method returns non-void type does have a return tag in the javadoc.
JavadocMethod.allowMissingThrowsTags       = Whether to ignore errors when a method declares that it throws exceptions but does have matching throws tags in the javadoc.
JavadocMethod.allowThrowsTagsForSubclasses = Whether to allow documented exceptions that are subclass of one of declared exception.
JavadocMethod.allowUndeclaredRTE           = Whether to allow documented exceptions that are not declared if they are a subclass of java.lang.RuntimeException.
JavadocMethod.desc                         = Checks the Javadoc of a method or constructor. By default, does not check for unused throws. To allow documented java.lang.RuntimeExceptions that are not declared, set property allowUndeclaredRTE to true. The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to a different scope.<br/>\r\nError messages about parameters and type parameters for which no param tags are present can be suppressed by defining property <code>allowMissingParamTags</code>. Error messages about exceptions which are declared to be thrown, but for which no throws tag is present can be suppressed by defining property <code>allowMissingThrowsTags</code>. Error messages about methods which return non-void but for which no return tag is present can be suppressed by defining property <code>allowMissingReturnTag</code>.<br/>\r\n<br/>\r\nJavadoc is not required on a method that is tagged with the <code>@Override</code> annotation. However under Java 5 it is not possible to mark a method required for an interface (this was <em>corrected</em> under Java 6). Hence Checkstyle supports using the convention of using a single <code>{@inheritDoc}</code> tag instead of all the other tags. For example, if the following method is implementing a method required by an interface, then the Javadoc could be done as: \r\n<pre>\r\n/** {@inheritDoc} */\r\npublic int checkReturnTag(final int aTagIndex,\r\n                          JavadocTag[] aTags,\r\n                          int aLineNo)\r\n</pre> \r\n
JavadocMethod.excludeScope                 = visibility scope where Javadoc comments are not checked
JavadocMethod.logLoadErrors                = This check may need to load exception classes mentioned in the @throws tag to check whether they are RuntimeExceptions. If loading the class fails, this property allows to control checkstyle's error handling. If set to false (the default) a classpath configuration problem is assumed and the TreeWalker stops operating on the class completely. If set to true, checkstyle assumes a typo or refactoring problem in the javadoc and logs the problem in the normal checkstyle report (potentially masking a configuration error).
JavadocMethod.name                         = Method Javadoc
JavadocMethod.scope                        = Visibility scope where Javadoc comments are checked.
JavadocMethod.suppressLoadErrors           = Controls whether to show class loading errors in the checkstyle report.
JavadocMethod.tokens                       = Tokens to check.
JavadocMethod.ignoreMethodNamesRegex       = Ignore method whose names are matching specified regex.

JavadocPackage.allowLegacy = If set then allow the use of a package.html file.
JavadocPackage.desc        = Checks that each Java package has a Javadoc comment. By default it only allows a <code>package-info.java</code> file, but can be configured to allow a <code>package.html</code> file. \r\n<br/>\r\nAn error will be reported if both files exist as this is not allowed by the Javadoc tool. \r\n
JavadocPackage.name        = Package Javadoc
JavadocPackage.fileExtensions = file type extension of files to process

JavadocStyle.checkEmptyJavadoc  = Whether to check if the Javadoc is missing a describing text.
JavadocStyle.checkFirstSentence = Whether to check the first sentence for proper end of sentence.
JavadocStyle.endOfSentenceFormat= Format for matching the end of a sentence.
JavadocStyle.checkHtml          = Whether to check for incomplete html tags.
JavadocStyle.desc               = Validates Javadoc comments to help ensure they are well formed. The following checks are performed:
JavadocStyle.excludeScope       = visibility scope where Javadoc comments are not checked.
JavadocStyle.name               = Style Javadoc
JavadocStyle.scope              = Visibility scope where Javadoc comments are checked.
JavadocStyle.tokens             = Tokens to check.

JavadocType.authorFormat  = Pattern for @author tag.
JavadocType.desc          = Checks Javadoc comments for class and interface definitions. By default, does not check for author or version tags. The scope to verify is specified using the Scope  class and defaults to Scope.PRIVATE. To verify another scope, set property scope to one of the Scope constants. To define the format for an author tag or a version tag, set property <cdoe>authorFormat</code> or <code>versionFormat</code> respectively to a  regular expression.<br/>\r\nError messages about type parameters for which no param tags are present can be suppressed by defining property <code>allowMissingParamTags</code>.
JavadocType.excludeScope  = visibility scope where Javadoc comments are not checked
JavadocType.name          = Type Javadoc
JavadocType.scope         = Visibility scope where Javadoc comments are checked.
JavadocType.tokens        = Tokens to check.
JavadocType.versionFormat = Pattern for @version tag.
JavadocType.allowUnknownTags = Whether to ignore errors when a Javadoc tag is not recognised.
JavadocType.allowMissingParamTags = whether to ignore errors when a class has type parameters but does not have matching param tags in the javadoc.

JavadocVariable.desc         = Checks that variables have Javadoc comments.
JavadocVariable.excludeScope = visibility scope where Javadoc comments are not checked
JavadocVariable.ignoreNamePattern = regexp to define variable names to ignore
JavadocVariable.name         = Variable Javadoc
JavadocVariable.scope        = Visibility scope where Javadoc comments are checked.
JavadocVariable.tokens       = tokens to check

WriteTag.desc        = Outputs a JavaDoc tag as information. Can be used e.g. with the stylesheets that sort the report by author name. To define the format for a tag, set property tagFormat to a regular expression. This check uses two different severity levels. The normal one is used for reporting when the tag is missing. The additional one (tagSeverity) is used for the level of reporting when the tag exists.
WriteTag.name        = Write Tag
WriteTag.tag         = Name of tag
WriteTag.tagFormat   = Format of tag
WriteTag.tagSeverity = Severity level when tag is found and printed
WriteTag.tokens      = tokens to check

NonEmptyAtclauseDescription.name=Non Empty @-clause Description
NonEmptyAtclauseDescription.desc=Checks that certain @-clause tags are followed by a description.
NonEmptyAtclauseDescription.javadocTokens=the Javadoc tokens to check
NonEmptyAtclauseDescription.violateExecutionOnNonTightHtml = This property determines if a check should log a violation upon encountering javadoc with non-tight html

JavadocTagContinuationIndentation.name= Javadoc Tag Continuation Indentation
JavadocTagContinuationIndentation.desc= Checks the indentation of the continuation lines in @-clauses.
JavadocTagContinuationIndentation.offset= How many spaces to use for new indentation level.
JavadocTagContinuationIndentation.violateExecutionOnNonTightHtml = This property determines if a check should log a violation upon encountering javadoc with non-tight html

SummaryJavadoc.name=Summary Javadoc
SummaryJavadoc.desc=Checks that Javadoc summary sentence does not contain phrases that are not recommended to use.
SummaryJavadoc.forbiddenSummaryFragments=forbidden summary fragments
SummaryJavadoc.period = period symbol at the end of first javadoc sentence
SummaryJavadoc.violateExecutionOnNonTightHtml = This property determines if a check should log a violation upon encountering javadoc with non-tight html

AtclauseOrder.name = @-clause Order
AtclauseOrder.desc = Checks the order of @-clauses in Javadoc comments.
AtclauseOrder.target = allows to specify targets to check @-clauses.
AtclauseOrder.tagOrder = allows to specify the order by tags.
AtclauseOrder.violateExecutionOnNonTightHtml = This property determines if a check should log a violation upon encountering javadoc with non-tight html

JavadocParagraph.name = Javadoc Paragraph
JavadocParagraph.desc=Checks that:<ul><li>There is one blank line between each of two paragraphs and one blank line before the at-clauses block if it is present.</li><li>Each paragraph but the first has &lt;p&gt; immediately before the first word, with no space after.</li></ul>
JavadocParagraph.allowNewlineParagraph= whether the <p> tag should be placed immediately before the first word
JavadocParagraph.violateExecutionOnNonTightHtml = This property determines if a check should log a violation upon encountering javadoc with non-tight html

SingleLineJavadoc.name=Single Line Javadoc
SingleLineJavadoc.desc=Checks that a Javadoc block which can fit on a single line and doesn't contain @-clauses. Javadoc comment that contains at least one @-clause should be formatted in few lines.
SingleLineJavadoc.ignoredTags=Allows to specify at-clauses which are ignored by the check.
SingleLineJavadoc.ignoreInlineTags=Whether inline tags must be ignored.
SingleLineJavadoc.violateExecutionOnNonTightHtml = This property determines if a check should log a violation upon encountering javadoc with non-tight html
