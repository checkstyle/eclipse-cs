
ArrayTrailingComma.desc = Checks that array initialization contains a trailing comma.\r\n<pre>\r\nint[] a = new int[]\r\n{\r\n    1,\r\n    2,\r\n    3,\r\n};\r\n</pre>\r\nThe check allows to not add a comma if both left and right curlys are on the same line.\r\n<pre>\r\nreturn new int[] { 0 };\r\n</pre>\r\nRationale: Putting this comma in makes it easier to change the order of the elements or add new elements on the end.
ArrayTrailingComma.name = Trailing Array Comma

AvoidInlineConditionals.desc = Detects inline conditionals. An example inline conditional is this:\r\n<pre>\r\nString a = getParameter("a");\r\nString b = (a==null || a.length<1) ? null : a.substring(1);\r\n</pre>\r\nRationale: Some developers find inline conditionals hard to read, so their company's coding standards forbids them.
AvoidInlineConditionals.name = Avoid Inline Conditionals

Coding.group = Coding Problems

CovariantEquals.desc = Checks that classes that define a covariant equals() method also override method equals(java.lang.Object). Inspired by findbugs.<br/>\r\nRationale: Mistakenly defining a covariant equals() method without overriding method equals(java.lang.Object) can produce unexpected runtime behaviour.
CovariantEquals.name = Covariant Equals

DeclarationOrder.desc = According to <a href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc2.html#1852" target="_blank">Code Conventions for the Java Programming Language</a> , the parts of a class or interface declaration should appear in the following order:\r\n<ol>\r\n<li>Class (static) variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li>\r\n<li>Instance variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li>\r\n<li>Constructors </li>\r\n<li>Methods</li>\r\n</ol>\r\n
DeclarationOrder.name = Declaration Order Check
DeclarationOrder.ignoreConstructors = whether to ignore constructors
DeclarationOrder.ignoreModifiers    = whether to ignore modifier

DefaultComesLast.desc = Check that the <code>default</code> is after all the cases in a <code>switch</code> statement.<br/>\r\nRationale: Java allows <code>default</code> anywhere within the <code>switch</code> statement. But it is more readable if it comes after the last case.
DefaultComesLast.name = Default Comes Last
DefaultComesLast.skipIfLastAndSharedWithCase = whether to allow <code>default</code> along with case if they are not last

EmptyStatement.desc = Detects empty statements (standalone ;).
EmptyStatement.name = Empty Statement

EqualsAvoidNull.desc = Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison.<br/>The check also processes <code>String.equalsIgnoreCase()</code> invocations (which can be suppressed).\r\n<br/><br/>\r\nRationale: Calling the equals() method on String literals will avoid a potential NullPointerException. Also, it is pretty common to see null check right before equals comparisons which is not necessary in the below example.<br/>\r\n<br/>\r\nFor example:\r\n<pre>\r\nString nullString = null;\r\nnullString.equals("My_Sweet_String");\u0009\r\n</pre>\r\nshould be refactored to:\u0009\r\n<pre>\u0009\r\nString nullString = null;\r\n"My_Sweet_String".equals(nullString);\r\n</pre>\r\nLimitations: If the equals method is overridden or a covariant equals method is defined and the implementation is incorrect (where s.equals(t) does not return the same result as t.equals(s)) then rearranging the called on object and parameter may have unexpected results.<br/>\r\n<br/>\r\nJava's Autoboxing feature has an affect on how this check is implemented. Pre Java 5 all IDENT + IDENT object concatenations would not cause a NullPointerException even if null. Those situations could have been included in this check. They would simply act as if they surrounded by String.valueof() which would concatenate the String null.<br/>\r\n<br/>\r\nThe following example will cause a NullPointerException as a result of what autoboxing does.\r\n<pre>\r\nInteger i = null, j = null;\r\nString number = "5"\r\nnumber.equals(i + j);\r\n</pre>\r\nSince, it is difficult to determine what kind of Object is being concatenated all ident concatenation is considered unsafe.
EqualsAvoidNull.name = Equals Avoid Null
EqualsAvoidNull.ignoreEqualsIgnoreCase = Whether to ignore String.equalsIgnoreCase() invocations

EqualsHashCode.desc = Checks that classes that override <code>equals()</code>  also override <code>hashCode()</code>.<br/>\r\nRationale: The contract of <code>equals()</code> and <code>hashCode()</code> requires that equal objects have the same hashCode. Hence, whenever you override <code>equals()</code> you must override <code>hashCode()</code> to ensure that your class can be used in collections that are hash based.
EqualsHashCode.name = Equals and HashCode

ExplicitInitialization.desc = Checks if any class or object member explicitly initialized to default for its type value (<code>null</code> for object references, zero for numeric types and <code>char</code> and <code>false</code> for <code>boolean</code>.<br/>\r\nRationale: each instance variable gets initialized twice, to the same value. Java initializes each instance variable to its default value (0 or null) before performing any initialization specified in the code. So in this case, x gets initialized to 0 twice, and bar gets initialized to null twice. So there is a minor inefficiency. This style of coding is a hold-over from C/C++ style coding, and it shows that the developer isn't really confident that Java really initializes instance variables to default values.
ExplicitInitialization.name = Explicit Initialization
ExplicitInitialization.onlyObjectReferences = whether only explicit initializations made to null for objects should be checked

FallThrough.checkLastCaseGroup = Whether we need to check last case group or not.
FallThrough.desc               = Checks for fall through in switch  statements Finds locations where a <code>case</code> contains Java code - but lacks a <code>break, return, throw</code> or <code>continue</code> statement.<br/>\r\nThe check honors special comments to supress the warning. By default the text "fallthru", "fall through", "fallthrough", "falls through" and "fallsthrough" are recognized (case sensitive). The comment containing this words must be a one-liner and must be on the last none-empty line before the <code>case</code> triggering the warning or on the same line before the <code>case</code> (urgly, but possible).\r\n<pre>\r\nswitch (i){\r\ncase 0:\r\n    i++; // fall through\r\n\r\ncase 1:\r\n    i++;\r\n    // falls through\r\ncase 2: {\r\n    i++;\r\n}\r\n// fallthrough\r\ncase 3:\r\n    i++;\r\n/* fallthru */case 4:\r\n    i++\r\n    break;\r\n}\r\n</pre>\u0009\r\nNote: the check works in assumption that there is no unreachable code in the <code>case</code>.
FallThrough.name               = Fall Through
FallThrough.reliefPattern      = Regular expression to match the relief comment that suppresses the warning about a fall through.

FinalLocalVariable.desc   = Checks that local variables that never have their values changed are declared final. The check can be configured to also check that unchanged parameters are declared final.<br/>\r\nWhen configured to check parameters, the check ignores parameters of interface methods and abstract methods.
FinalLocalVariable.name   = Final Local Variable
FinalLocalVariable.tokens = Tokens to check.
FinalLocalVariable.validateEnhancedForLoopVariable = Controls whether to check enhanced for-loop variable.

HiddenField.desc                       = Checks that a local variable or a parameter does not shadow a field that is defined in the same class.
HiddenField.ignoreAbstractMethods      = Controls whether to ignore parameters of abstract methods.
HiddenField.ignoreConstructorParameter = Controls whether to ignore constructor parameters.
HiddenField.ignoreFormat               = pattern for names to ignore
HiddenField.ignoreSetter               = Ignore property setter parameters hiding the corresponding field
HiddenField.setterCanReturnItsClass    = Used to ignore the field warning in builder methods (setters returning the enclosing instance "this")
HiddenField.name                       = Hidden Field
HiddenField.tokens                     = Tokens to check.

IllegalCatch.desc              = Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.<br/>\r\nRationale: Junior developers often simply catch Exception in an attempt to handle multiple exception classes. This unfortunately leads to code that inadvertantly catchs NPE, OutOfMemoryErrors, etc.
IllegalCatch.illegalClassNames = exception class names to reject
IllegalCatch.name              = Illegal Catch

IllegalInstantiation.classes = Comma separated list of classes that should not be instantiated.
IllegalInstantiation.desc    = Checks for illegal instantiations where a factory method is preferred.<br/>\r\nRationale: Depending on the project, for some classes it might be preferable to create instances through factory methods rather than calling the constructor.\r\n<p>\r\nA simple example is the java.lang.Boolean class. In order to save memory and CPU cycles, it is preferable to use the predefined constants <code>TRUE</code> and <code>FALSE</code>. Constructor invocations should be replaced by calls to <code>Boolean.valueOf()</code>.\r\n</p>\r\nSome extremely performance sensitive projects may require the use of factory methods for other classes as well, to enforce the usage of number caches or object pools.
IllegalInstantiation.name    = Illegal Instantiation
IllegalInstantiation.tokens  = tokens to check

IllegalThrows.desc              = This check can be used to ensure that types are not declared to be thrown. Declaring to throw java.lang.Error or java.lang.RuntimeException is almost never acceptable.
IllegalThrows.illegalClassNames = throw class names to reject
IllegalThrows.name              = Illegal Throws
IllegalThrows.ignoredMethodNames= names of methods to ignore
IllegalThrows.ignoreOverriddenMethods = ignore checking overridden methods (marked with Override or java.lang.Override annotation).

IllegalToken.desc           = Checks for illegal tokens.<br/>\r\nRational: Certain language features often lead to hard to maintain code or are non-obvious to novice developers. Other features may be discouraged in certain frameworks, such as not having native methods in EJB components.
IllegalToken.name           = Illegal Tokens
IllegalToken.tokens         = Tokens to check.

IllegalTokenText.desc       = Checks for illegal token text.
IllegalTokenText.format     = illegal pattern
IllegalTokenText.ignoreCase = Controls whether to ignore case when matching.
IllegalTokenText.message    = Message which is used to notify about violations; if empty then the default message is used.
IllegalTokenText.name       = Illegal Tokens Text
IllegalTokenText.tokens     = Tokens to check.

IllegalType.desc                    = Checks that particular class are never used as types in variable declarations, return values or parameters. Includes a pattern check that by default disallows abstract classes.<br/>\r\nRationale: Helps reduce coupling on concrete classes. In addition abstract classes should be thought of a convenience base class implementations of interfaces and as such are not types themselves.
IllegalType.format                  = pattern for illegal class name
IllegalType.ignoredMethodNames      = methods that should not be checked.
IllegalType.illegalClassNames       = classes that should not be used as types in variable declarations, return values or parameters.
IllegalType.legalAbstractClassNames = abstract classes that may be used as types.
IllegalType.name                    = Illegal Type
IllegalType.tokens                  = Tokens to check.
IllegalType.validateAbstractClassNames = Whether to validate abstract class names
IllegalType.memberModifiers         = Check methods and fields with only corresponding modifiers.

InnerAssignment.desc   = Checks for assignments in subexpressions, such as in <code>String s = Integer.toString(i = 2);</code>.<br/>\r\nRationale: With the exception of for iterators, all assignments should occur in their own toplevel statement to increase readability. With inner assignments like the above it is difficult to see all places where a variable is set.
InnerAssignment.name   = Inner Assignment

MagicNumber.desc          = Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers.
MagicNumber.ignoreNumbers = Comma separated list of non-Magic numbers.
MagicNumber.name          = Magic Number
MagicNumber.tokens        = Tokens to check.
MagicNumber.ignoreHashCodeMethod = Ignore magic numbers in hashCode methods.
MagicNumber.ignoreAnnotation = Ignore magic numbers in annotation declarations.
MagicNumber.ignoreFieldDeclaration = Ignore magic numbers in field declarations.
MagicNumber.constantWaiverParentToken = Token that are allowed in the AST path from the number literal to the enclosing constant definition.

MissingCtor.desc = Checks that classes (except abstract one) define a constructor and don't rely on the default one.
MissingCtor.name = Missing Constructor

MissingSwitchDefault.desc = Checks that switch statement has "default" clause.<br/>\r\nRationale: It's usually a good idea to introduce a default case in every switch statement. Even if the developer is sure that all currently possible cases are covered, this should be expressed in the default branch, e.g. by using an assertion. This way the code is protected aginst later changes, e.g. introduction of new types in an enumeration type.
MissingSwitchDefault.name = Missing Switch Default

ModifiedControlVariable.desc = Check for ensuring that for loop control variables are not modified inside the for block. An example is:\r\n<pre>\r\nfor (int i = 0; i < 1; i++) {\r\n    i++;\r\n}\r\n</pre>\r\nRationale: If the control variable is modified inside the loop body, the program flow becomes more difficult to follow. An option is to replace the for loop with a while loop.
ModifiedControlVariable.name = Modified Control Variable
ModifiedControlVariable.skipEnhancedForLoopVariable = Controls whether to check enhanced-for-loop variable.

MultipleStringLiterals.allowedDuplicates       = The maximum number of occurrences to allow without generating a warning
MultipleStringLiterals.desc                    = Checks for multiple occurrences of the same string literal within a single file.<br/>\r\nRationale: Code duplication makes maintenance more difficult, so it can be better to replace the multiple occurrences with a constant.
MultipleStringLiterals.ignoreOccurrenceContext = Token type names where duplicate strings are ignored even if they don't match ignoredStringsRegexp. This allows you to exclude syntactical contexts like Annotations or static initializers from the check.
MultipleStringLiterals.ignoreStringsRegexp     = Regexp pattern for ignored strings (with quotation marks)
MultipleStringLiterals.name                    = Multiple String Literals

MultipleVariableDeclarations.desc = Checks that each variable declaration is in its own statement and on its own line.<br/>\r\nRationale: <a href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc5.html#2991" target="_blank"> the SUN Code conventions chapter 6.1</a> recommends that declarations should be one per line/statement.
MultipleVariableDeclarations.name = Multiple Variable Declaration

NestedForDepth.desc = Restricts nested <code>for</code> blocks to a specified depth (default = 1).
NestedForDepth.max  = allowed nesting depth
NestedForDepth.name = Nested For Depth

NestedIfDepth.desc = Restricts nested if-else blocks to a specified depth (default = 1).
NestedIfDepth.max  = allowed nesting depth
NestedIfDepth.name = Nested If Depth

NestedTryDepth.desc = Restricts nested try blocks to a specified depth (default = 1).
NestedTryDepth.max  = allowed nesting depth
NestedTryDepth.name = Nested Try Depth

NoClone.desc = Checks that the clone method is not overridden from the Object class.<br/>\r\n<br/>\r\nRationale: The clone method relies on strange/hard to follow rules that do not work it all situations. Consequently, it is difficult to override correctly. Below are some of the rules/reasons why the clone method should be avoided.<br/>\r\nClasses supporting the clone method should implement the Cloneable interface but the Cloneable interface does not include the clone method. As a result, it doesn't enforce the method override.<br/>\r\nThe Cloneable interface forces the Object's clone method to work correctly. Without implementing it, the Object's clone method will throw a CloneNotSupportedException.<br/>\r\nNon-final classes must return the object returned from a call to super.clone(). \r\nFinal classes can use a constructor to create a clone which is different from non-final classes.<br/>\r\n<ul>\r\n<li>If a super class implements the clone method incorrectly all subclasses calling super.clone() are doomed to failure.</li>\r\n<li>If a class has references to mutable objects then those object references must be replaced with copies in the clone method after calling super.clone().</li>\r\n<li>The clone method does not work correctly with final mutable object references because final references cannot be reassigned.</li>\r\n<li>If a super class overrides the clone method then all subclasses must provide a correct clone implementation.</li>\r\n</ul>\r\nTwo alternatives to the clone method, in some cases, is a copy constructor or a static factory method to return copies of an object. Both of these approaches are simpler and do not conflict with final fields. The do not force the calling client to handle a CloneNotSuportException. They also are typed therefore no casting is necessary. Finally, they are more flexible since they can take interface types rather than concrete classes.<br/>\r\n<br/>\r\nSometimes a copy constructor or static factory is not an acceptable alternative to the clone method. The example below highlights the limitation of a copy constructor (or static factory). Assume Square is a subclass for Shape. \r\n<pre>\r\n       Shape s1 = new Square();\r\n       System.out.println(s1 instanceof Square); //true\r\n</pre>\r\n...assume at this point the code knows nothing of s1 being a Square that's the beauty of polymorphism but the code wants to copy the Square which is declared as a Shape, its super type... \r\n<pre>\r\n       Shape s2 = new Shape(s1); //using the copy constructor\r\n       System.out.println(s2 instanceof Square); //false\r\n</pre>\r\nThe working solution (without knowing about all subclasses and doing many casts) is to do the following (assuming correct clone implementation). \r\n<pre>\r\n       Shape s2 = s1.clone();\r\n       System.out.println(s2 instanceof Square); //true\r\n</pre>\r\nJust keep in mind if this type of polymorphic cloning is required then a properly implemented clone method may be the best choice.<br/>\r\n<br/>\r\nMuch of this information was taken from Effective Java: Programming Language Guide First Edition by Joshua Bloch pages 45-52. Give Bloch credit for writing an excellent book.<br/>\r\n<br/>\r\nThis check is almost exactly the same as the {@link NoFinalizerCheck}
NoClone.name = No Clone

NoFinalizer.desc = Verifies there are no <code>finalize()</code> methods defined in a class.
NoFinalizer.name = No Finalizer

PackageDeclaration.desc = Ensure a class is has a package declaration, and (optionally) whether the package name matches the directory name for the source file.<br/>\r\nRationale: Classes that live in the null package cannot be imported. Many novice developers are not aware of this.
PackageDeclaration.name = Package Declaration
PackageDeclaration.matchDirectoryStructure = Whether to check for directory and package name match.

ParameterAssignment.desc = Disallow assignment of parameters.<br/>\r\nRationale: Parameter assignment is often considered poor programming practice. Forcing developers to declare parameters as final is often onerous. Having a check ensure that parameters are never assigned would give the best of both worlds.
ParameterAssignment.name = Parameter Assignment

RequireThis.checkFields  = whether we should check fields usage or not
RequireThis.checkMethods = whether we should check methods usage or not
RequireThis.desc         = Checks that code doesn't rely on the "this." default, i.e. references to instance variables and methods of the present object are explicitly of the form "this.varName" or "this.methodName(args)".
RequireThis.name         = Require This
RequireThis.validateOnlyOverlapping = Whether to check only overlapping by variables or arguments.

ReturnCount.desc   = Restricts the number of return statements. Default = 2. Ignores specified methods (<code>equals()</code> by default).<br/>\r\nRationale: Too many return points can be indication that code is attempting to do too much or may be difficult to understand.
ReturnCount.format = method names to ignore
ReturnCount.max    = maximum allowed number of return statements
ReturnCount.maxForVoid = maximum allowed number of return statements in void methods/constructors/lambdas
ReturnCount.name   = Return Count
ReturnCount.tokens = tokens to check

SimplifyBooleanExpression.desc = Checks for overly complicated boolean expressions. Currently finds code like  <code>if (b == true), b || true, !false</code>, etc.<br/>\r\nRationale: Complex boolean logic makes code hard to understand and maintain.
SimplifyBooleanExpression.name = Simplify Boolean Expression

SimplifyBooleanReturn.desc = Checks for overly complicated boolean return statements. For example the following code\r\n<pre>\r\nif (valid())\r\n    return false;\r\nelse\r\n    return true;\r\n</pre>\r\ncould be written as\r\n<pre>\r\nreturn !valid();\r\n</pre>\r\nThe Idea for this Check has been shamelessly stolen from the equivalent <a href="http://pmd.sourceforge.net/" target="_blank">PMD</a> rule.
SimplifyBooleanReturn.name = Simplify Boolean Return

StringLiteralEquality.desc = Checks that string literals are not used with == or !=.<br/>\r\nRationale: Novice Java programmers often use code like:\r\n<pre>\r\nif (x == "something")\r\n</pre>\r\nwhen they mean\r\n<pre>\r\nif ("something".equals(x))\r\n</pre>\r\n\u0009\r\n\u0009\u0009
StringLiteralEquality.name = String Literal Equality

SuperClone.desc = Checks that an overriding <code>clone()</code> method invokes <code>super.clone()</code>.<br/>\r\nReference: <a href="http://java.sun.com/j2se/1.4.1/docs/api/java/lang/Object.html#clone%28%29" target="_blank">Object.clone()</a>.
SuperClone.name = SuperClone

SuperFinalize.desc = Checks that an overriding <code>finalize()</code> method invokes <code>super.finalize()</code>.<br/>\r\nReference: <a href="http://java.sun.com/docs/books/tutorial/java/data/garbagecollection.html" target="_blank">Cleaning Up Unused Objects</a>.
SuperFinalize.name = SuperFinalize

UnnecessaryParentheses.desc = Checks for the use of unnecessary parentheses.
UnnecessaryParentheses.name = Unnecessary Parentheses
UnnecessaryParentheses.tokens = tokens to check

OneStatementPerLine.name = One Statement Per Line
OneStatementPerLine.desc = Checks there is only one statement per line. The following line will be flagged as an error:<br/><code>x = 1; y = 2; // Two statments on a single line.</code>

VariableDeclarationUsageDistance.name = Variable Declaration Usage Distance
VariableDeclarationUsageDistance.desc = Checks the distance between declaration of variable and its first usage.
VariableDeclarationUsageDistance.allowedDistance = A distance between declaration of variable and its first usage
VariableDeclarationUsageDistance.ignoreVariablePattern = pattern for ignoring the distance calculation
VariableDeclarationUsageDistance.validateBetweenScopes = Allows to calculate the distance between declaration of variable and its first usage in the different scopes.
VariableDeclarationUsageDistance.ignoreFinal = Allows to ignore variables with a 'final' modifier.

OverloadMethodsDeclarationOrder.name = Overload Methods Declaration Order
OverloadMethodsDeclarationOrder.desc = Checks that overload methods are grouped together.