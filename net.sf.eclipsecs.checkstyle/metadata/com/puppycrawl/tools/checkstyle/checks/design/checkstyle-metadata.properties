Design.group = Class Design

DesignForExtension.desc = Checks that classes are designed for extension. More specifically, it enforces a programming style where superclasses provide empty "hooks" that can be implemented by subclasses.<br/>\r\nThe exact rule is that nonprivate, nonstatic methods of classes that can be subclassed must either be\r\n<ul>\r\n<li>abstract or</li>\r\n<li>final or</li>\r\n<li>have an empty implementation</li>\r\n</ul>\r\nRationale: This API design style protects superclasses against beeing broken by subclasses. The downside is that subclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass, but that also means that subclasses cannot corrupt the state of the superclass by forgetting to call the super method.
DesignForExtension.name = Design For Extension
DesignForExtension.ignoredAnnotations = Annotations which allow the check to skip the method from validation.

FinalClass.desc = Checks that a class which has only private constructors is declared as final.
FinalClass.name = Final Class

InnerTypeLast.desc = Check nested/internal types to be declared at the bottom of the class (after all methods/fields declaration).
InnerTypeLast.name = Inner Type Last

HideUtilityClassConstructor.desc = Make sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor.<br/>\r\nRationale: Instantiating utility classes does not make sense. Hence the constructors should either be private or (if you want to allow subclassing) protected. A common mistake is forgetting to hide the default constructor.<br/><br/>\r\nIf you make the constructor protected you may want to consider the following constructor implementation technique to disallow instantiating subclasses:\r\n<pre>\r\npublic class StringUtils // not final to allow subclassing\r\n{\r\n    protected StringUtils() {\r\n        throw new UnsupportedOperationException(); // prevents calls from subclass\r\n    }\r\n\r\n    public static int count(char c, String s) {\r\n        // ...\r\n    }\r\n}\r\n</pre>\r\n\r\n\u0009
HideUtilityClassConstructor.name = Hide Utility Class Constructor

InterfaceIsType.allowMarkerInterfaces = Controls whether marker interfaces like Serializable are allowed.
InterfaceIsType.desc                  = Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.<br/>\r\nAccording to Bloch, an interface should describe a <em>type</em>. It is therefore inappropriate to define an interface that does not contain any methods but only constants. The Standard class <a href="http://java.sun.com/j2se/1.4.1/docs/api/javax/swing/SwingConstants.html" target="_blank">javax.swing.SwingConstants</a> is an example of a class that would be flagged by this check.<br/><br/>\r\nThe check can be configured to also disallow marker interfaces like <code>java.io.Serializable</code>, that do not contain methods or constants at all.
InterfaceIsType.name                  = Interface Is Type

MutableException.desc   = Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable. That is, have only final fields.<br/>\r\nThe current algorithm is very simple it checks that all members of exception are final. User can still mutates an exception's instance (e.g. Throwable has setStackTrace(StackTraceElement[] stackTrace) method which changes stack trace). But, at least, all information provided by this exception type is unchangable.<br/>\r\nRationale: Exception instances should represent an error condition. Having non final fields not only allows the state to be modified by accident and therefore mask the original condition but also allows developers to accidentally forget to initialise state thereby leading to code catching the exception to draw incorrect conclusions based on the state.
MutableException.format = pattern for name of exception class.
MutableException.extendedClassNameFormat = pattern for extended class names
MutableException.name   = Mutable Exception

ThrowsCount.desc = Restricts throws statements to a specified count (default = 1).<br/>\r\nRationale: Exceptions form part of a methods interface. Declaring a method to throw too many differently rooted exceptions makes exception handling onerous and leads to poor programming practices such as catch (Exception). This check forces developers to put exceptions into a heirachy such that in the simplest case, only one type of exception need be checked for by a caller but allows any sub-classes to be caught specifically if necessary.
ThrowsCount.max  = maximum allowed number of throws statments
ThrowsCount.name = Throws Count
ThrowsCount.ignorePrivateMethods = Whether private methods must be ignored.

VisibilityModifier.desc                = Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.<br/>\r\nPublic members are not flagged if the name matches the public member regular expression (contains "<code>^serialVersionUID$</code>" by default). Note: Checkstyle 2 used to include "<code>^f[A-Z][a-zA-Z0-9]*$</code>" in the default pattern to allow CMP for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary to have public access for persistent fields, hence the default has been changed.<br/>\r\nRationale: Enforce encapsulation.
VisibilityModifier.name                = Visibility Modifier
VisibilityModifier.packageAllowed      = Whether package visible members are allowed or not.
VisibilityModifier.protectedAllowed    = Whether protected members are allowed or not.
VisibilityModifier.publicMemberPattern = Pattern for public members that should be ignored.
VisibilityModifier.allowPublicFinalFields = allows public final fields
VisibilityModifier.allowPublicImmutableFields = allows immutable fields to be declared as public if defined in final class
VisibilityModifier.immutableClassCanonicalNames = immutable classes canonical names
VisibilityModifier.ignoreAnnotationCanonicalNames = ignore annotations canonical names

OneTopLevelClass.name = One Top Level Class
OneTopLevelClass.desc = Checks that each top-level class, interface or enum resides in a source file of its own. Official description of a 'top-level' term:7.6. Top Level Type Declarations. If file doesn't contains public class, enum or interface, top-level type is the first type in file.