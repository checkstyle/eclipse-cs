
ArrayTypeStyle.desc      = Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[]).
ArrayTypeStyle.javaStyle = Controls whether to enforce Java style (true) or C style (false).
ArrayTypeStyle.name      = Array Type Style

DescendantToken.desc           = Checks for restricted tokens beneath other tokens.<br/>\r\nWARNING: This is a very powerful and flexible check, but, at the same time, it is low level and very implementation dependent because its results depend on the grammar we use to build abstract syntax trees. Thus we recomend using other checks when they provide the desired funcionality. All in all, this check just works on the level of an abstract tree and knows nothing about language structures.
DescendantToken.limitedTokens  = Tokens to check.
DescendantToken.maximumDepth   = the maximum depth for descendant counts
DescendantToken.maximumMessage = error message when maximum count exceeded
DescendantToken.maximumNumber  = a maximum count for descendants
DescendantToken.minimumDepth   = the minimum depth for descendant counts
DescendantToken.minimumMessage = error message when minimum count not reached
DescendantToken.minimumNumber  = a minimum count for descendants
DescendantToken.name           = Descendent Token Check
DescendantToken.sumTokenCounts = whether the number of tokens found should be calculated from the sum of the individual token counts

FinalParameters.desc   = Check that method/constructor parameters are final. Interface methods are not checked - the final keyword does not make sense for interface method parameters as there is no code that could modify the parameter.<br/>\r\nRationale: Changing the value of parameters during the execution of the method's algorithm can be confusing and should be avoided. A great way to let the Java compiler prevent this coding style is to declare parameters final.
FinalParameters.name   = Final Parameters
FinalParameters.tokens = Tokens to check.
FinalParameters.ignorePrimitiveTypes = ignore primitive types as parameters

Miscellaneous.group = Miscellaneous

NewlineAtEndOfFile.desc           = Checks whether files end with a new line.<br/>\r\nRationale: Any source files and text files in general should end with a newline character, especially when using SCM systems such as CVS. CVS will even print a warning when it encounters a file that doesn't end with a newline.
NewlineAtEndOfFile.fileExtensions = file type extension of the files to check.
NewlineAtEndOfFile.lineSeparator  = type of line separator
NewlineAtEndOfFile.name           = New Line At End Of File

TodoComment.desc   = A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.
TodoComment.format = Regular expression definging pattern to look for.
TodoComment.name   = Todo Comment

TrailingComment.desc         = The check to ensure that requires that comments be the only thing on a line. For the case of // comments that means that the only thing that should precede it is whitespace. It doesn't check comments if they do not end line, i.e. it accept the following: Thread.sleep( 10 <some comment here> ); Format property is intended to deal with the "} // while" example.<br/>\r\nRationale: Steve McConnel in "Code Complete" suggests that endline comments are a bad practice. An end line comment would be one that is on the same line as actual code. For example:\r\n<pre>\r\na = b + c;      // Some insightful comment\r\nd = e / f;        // Another comment for this line\r\n</pre>\r\nQuoting "Code Complete" for the justfication:<br/>\r\n<ul>\r\n<li>"The comments have to be aligned so that they do not interfere with the visual structure of the code. If you don't align them neatly, they'll make your listing look like it's been through a washing machine."</li>\r\n<li>"Endline comments tend to be hard to format...It takes time to align them. Such time is not spent learning more about the code; it's dedicated solely to the tedious task of pressing the spacebar or tab key."</li>\r\n<li>"Endline comments are also hard to maintain. If the code on any line containing an endline comment grows, it bumps the comment farther out, and all the other endline comments will have to bumped out to match. Styles that are hard to maintain aren't maintained...."</li>\r\n<li>"Endline comments also tend to be cryptic. The right side of the line doesn't offer much room and the desire to keep the comment on one line means the comment must be short. Work then goes into making the line as short as possible instead of as clear as possible. The comment usually ends up as cryptic as possible...."</li>\r\n<li>"A systemic problem with endline comments is that it's hard to write a meaningful comment for one line of code. Most endline comments just repeat the line of code, which hurts more than it helps."</li>\r\n</ul>\r\nHis comments on being hard to maintain when the size of the line changes are even more important in the age of automated refactorings.
TrailingComment.format       = pattern for string allowed before comment.
TrailingComment.legalComment = pattern for text of trailing comment which is allowed. (this pattern will not be applied to multiline comments and text of comment will be trimmed before matching)
TrailingComment.name         = Trailing Comment

Translation.desc           = A FileSetCheck that ensures the correct translation of code by checking property files for consistency regarding their keys. Two property files describing one and the same context are consistent if they contain the same keys.<br/>\r\nConsider the following properties file in the same directory:\r\n<pre>\r\n#messages.properties\r\nhello=Hello\r\ncancel=Cancel\r\n\r\n#messages_de.properties\r\nhell=Hallo\r\nok=OK\r\n</pre>\r\nThe Translation check will find the typo in the german hello key, the missing ok key in the default resource file and the missing cancel key in the german resource file:\r\n<pre>\r\nmessages_de.properties: Key 'hello' missing.\r\nmessages_de.properties: Key 'cancel' missing.\r\nmessages.properties: Key 'hell' missing.\r\nmessages.properties: Key 'ok' missing.\r\n</pre>\r\n\u0009
Translation.fileExtensions = file type extension to identify translation files. Setting this property is typically only required if your translation files are preprocessed and the original files do not have the extension .properties
Translation.name           = Translation
Translation.baseName = Base name of resource bundles which contain message resources. It helps the check to distinguish config and localization resources.
Translation.requiredTranslations = Allows to specify language codes of required translations which must exist in project. The check looks only for messages bundles which names contain the word 'messages'. Language code is composed of the lowercase, two-letter codes as defined by ISO 639-1. Default value is empty String Set which means that only the existence of default translation is checked. Note, if you specify language codes (or just one language code) of required translations the check will also check for existence of default translation files in project.

UncommentedMain.desc            = Checks for uncommented main() methods (debugging leftovers).<br/>\r\nRationale: A main() method is often used for debug puposes. When debugging is finished, developers often forget to remove the method, which changes the API and increases the size of the resulting class/jar file. With the exception of the real program entry points, all main() methods should be removed/commented out of the sources.
UncommentedMain.excludedClasses = pattern for qualified names of classes which ar allowed to have main method.
UncommentedMain.name            = Uncommented Main

UpperEll.desc = Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification, Section 3.10.1.<br/>\r\nRationale: The lower case letter l looks a lot like the digit 1.
UpperEll.name = Upper Ell

OuterTypeFilename.name = Outer Type File Name
OuterTypeFilename.desc = Checks that the outer type name and the file name match. For example, the class Foo must be in a file named <code>Foo.java</code>.

AvoidEscapedUnicodeCharacters.name = Avoid Escaped Unicode Characters
AvoidEscapedUnicodeCharacters.desc = Restrict using Unicode escapes (e.g. \u221e). It is possible to allow using escapes for non-printable(control) characters. Also, this check can be configured to allow using escapes if trail comment is present. By the option it is possible to allow using escapes if literal contains only them.
AvoidEscapedUnicodeCharacters.allowEscapesForControlCharacters = Allow use escapes for non-printable(control) characters.
AvoidEscapedUnicodeCharacters.allowByTailComment = Allow use escapes if trail comment is present.
AvoidEscapedUnicodeCharacters.allowIfAllCharactersEscaped = Allow if all characters in literal are escaped.
AvoidEscapedUnicodeCharacters.allowNonPrintableEscapes = Allow non-printable escapes.

UniqueProperties.name = Unique Properties
UniqueProperties.desc =  Checks properties file for a duplicated properties.<br/><br/>Rationale: Multiple property keys usually appears after merge or rebase of several branches. While there is no errors in runtime, there can be a confusion on having different values for the duplicated properties.
UniqueProperties.fileExtensions = file type extension of the files to check.

SuppressWarningsHolder.name = SuppressWarningsHolder
SuppressWarningsHolder.desc = Maintains a set of check suppressions from {@link SuppressWarnings} annotations.
SuppressWarningsHolder.aliasList = the list of comma-separated alias assignments