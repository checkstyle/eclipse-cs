Naming.group = Naming Conventions

AbstractClassName.desc   = Checks that abstract class names follow naming convention.
AbstractClassName.format = Regular expression defining required naming pattern.
AbstractClassName.name   = Abstract Class Name
AbstractClassName.ignoreModifier = Controls whether to ignore checking for the abstract modifier on classes that match the name.
AbstractClassName.ignoreName = Controls whether to ignore checking the name. Realistically only useful if using the check to identify that match name and do not have the abstract modifier. name.

ClassTypeParameterName.desc   = Checks that class type parameter names follow naming convention.
ClassTypeParameterName.format = Regular expression defining required naming pattern.
ClassTypeParameterName.name   = Class Type Parameter Name

ConstantName.applyToPackage   = Controls whether to apply the check to package-protected constant.
ConstantName.applyToPrivate   = Controls whether to apply the check to private constant.
ConstantName.applyToProtected = Controls whether to apply the check to protected constant.
ConstantName.applyToPublic    = Controls whether to apply the check to public constant.
ConstantName.desc   = Checks that constants (static final fields) variables follow naming convention.
ConstantName.format = Regular expression defining required naming pattern.
ConstantName.name   = Constant Names

LocalFinalVariableName.desc   = Checks that local final variables follow naming convention.
LocalFinalVariableName.format = Regular expression defining required naming pattern.
LocalFinalVariableName.name   = Local Final Variable Names
LocalFinalVariableName.tokens = Tokens to check.

LocalVariableName.desc   = Checks that local variables follow naming convention.
LocalVariableName.format = Regular expression defining required naming pattern.
LocalVariableName.name   = Local Variable Names
LocalVariableName.allowOneCharVarInForLoop =  Allow one character variable name in initialization expressions in FOR loop. For example: for (int i = 1; i < 10; i++) {}

MemberName.applyToPackage   = Controls whether to apply the check to package-protected member.
MemberName.applyToPrivate   = Controls whether to apply the check to private member.
MemberName.applyToProtected = Controls whether to apply the check to protected member.
MemberName.applyToPublic    = Controls whether to apply the check to public member.
MemberName.desc             = Checks that member variables (non-static fields) follow naming convention.
MemberName.format           = Regular expression defining required naming pattern.
MemberName.name             = Member Names

MethodName.desc   = Checks that method names follow naming convention.
MethodName.format = Regular expression defining required naming pattern.
MethodName.name   = Method Names
MethodName.allowClassName = Controls whether to allow a method name to have the same name as the residing class name. This is not to be confused with a constructor. An easy mistake is to place a return type on a constructor declaration which turns it into a method.
MethodName.applyToPackage   = Controls whether to apply the check to package-protected member.
MethodName.applyToPrivate   = Controls whether to apply the check to private member.
MethodName.applyToProtected = Controls whether to apply the check to protected member.
MethodName.applyToPublic    = Controls whether to apply the check to public member.

MethodTypeParameterName.desc   = Checks that method type parameter names follow naming convention.
MethodTypeParameterName.format = Regular expression defining required naming pattern.
MethodTypeParameterName.name   = Method Type Parameter Name

InterfaceTypeParameterName.name = Interface Type Parameter Name
InterfaceTypeParameterName.desc = Checks that interface type parameters follow naming conventions.
InterfaceTypeParameterName.format = Regular expression defining required naming pattern.

PackageName.desc   = Checks that package names follow naming convention.
PackageName.format = Regular expression defining required naming pattern.
PackageName.name   = Package Names

ParameterName.desc   = Checks that parameter names follow naming convention.
ParameterName.format = Regular expression defining required naming pattern.
ParameterName.name   = Parameter Names
ParameterName.ignoreOverridden = Allows to skip methods with @Override annotation from validation.
ParameterName.accessModifiers = Access modifiers of methods where parameters are checked.

StaticVariableName.applyToPackage   = Controls whether to apply the check to package-protected static variable.
StaticVariableName.applyToPrivate   = Controls whether to apply the check to private static variable.
StaticVariableName.applyToProtected = Controls whether to apply the check to protected static variable.
StaticVariableName.applyToPublic    = Controls whether to apply the check to public static variable.
StaticVariableName.desc   = Checks that static variables (static, non-final fields) follow naming convention.
StaticVariableName.format = Regular expression defining required naming pattern.
StaticVariableName.name   = Static Variable Names

TypeName.applyToPackage   = Controls whether to apply the check to package-protected type.
TypeName.applyToPrivate   = Controls whether to apply the check to private type.
TypeName.applyToProtected = Controls whether to apply the check to protected type.
TypeName.applyToPublic    = Controls whether to apply the check to public type.
TypeName.desc   = Checks that class names follow naming convention.
TypeName.format = Regular expression defining required naming pattern.
TypeName.name   = Type Names
TypeName.tokens = Tokens to check.

AbbreviationAsWordInName.name = Abbreviation As Word In Name
AbbreviationAsWordInName.desc = The check validates abbreviation (consecutive capital letters) length in identifier names, it also allows to enforce camel case naming.<br/>Please read more at Google Style Guide to get to know how to avoid long abbreviations in names.
AbbreviationAsWordInName.allowedAbbreviationLength = indicates on the allowed amount of capital letters in targeted identifiers (abbreviations in the classes, interfaces, variables and methods names, ... ).
AbbreviationAsWordInName.allowedAbbreviations = list of abbreviations that must be skipped for checking. Abbreviations should be separated by comma, no spaces are allowed.
AbbreviationAsWordInName.ignoreFinal = allow to skip variables with final modifier.
AbbreviationAsWordInName.ignoreStatic = allow to skip variables with static modifier.
AbbreviationAsWordInName.ignoreOverriddenMethods = Allows to ignore methods tagged with @Override annotation (that usually mean inherited name).
AbbreviationAsWordInName.tokens = Tokens to check.

CatchParameterName.name = Catch Parameter Name
CatchParameterName.desc =  Checks that catch parameter names conform to a format specified by the format property. Default pattern has the following characteristic:<ul><li>allows names beginning with two lowercase letters followed by at least one uppercase or lowercase letter</li><li>allows e abbreviation (suitable for exceptions end errors)</li><li>allows ex abbreviation (suitable for exceptions)</li><li>allows t abbreviation (suitable for throwables)</li><li>prohibits numbered abbreviations like e1 or t2</li><li>prohibits one letter prefixes like pException</li><li>prohibits two letter abbreviations like ie or ee</li><li>prohibits any other characters than letters</li></ul>
CatchParameterName.format = Specifies valid identifiers.

LambdaParameterName.name = Lambda parameter names
LambdaParameterName.desc = Checks that lambda parameter names follow naming convention.
LambdaParameterName.format = Regular expression defining required naming pattern.
