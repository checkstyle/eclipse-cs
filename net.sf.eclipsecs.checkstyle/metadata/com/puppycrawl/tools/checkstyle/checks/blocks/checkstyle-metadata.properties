Blocks.group = Blocks

AvoidNestedBlocks.allowInSwitchCase = Allow nested blocks in case statements
AvoidNestedBlocks.desc              = Finds nested blocks, i.e. blocks that are used freely in the code.<br/>\r\nRationale: Nested blocks are often leftovers from the debugging process, they confuse the reader.
AvoidNestedBlocks.name              = Avoid Nested Blocks

EmptyBlock.desc   = Checks for empty blocks.
EmptyBlock.name   = Empty Block
EmptyBlock.option = policy on block contents
EmptyBlock.tokens = blocks to check

EmptyCatchBlock.name = Empty Catch Block
EmptyCatchBlock.desc = Checks for empty catch blocks.
EmptyCatchBlock.exceptionVariableName = The name of variable associated with exception
EmptyCatchBlock.commentFormat = The format of the first comment inside empty catch

LeftCurly.desc          = Checks for the placement of left curly braces (<code>'{'</code>) for code blocks.<br/>\r\nThe policy to verify is specified using property <code>option</code>.<br/>\r\nPolicies <scode>eol</code> and <code> nlow</code> take into account property <code>maxLineLength</code>.
LeftCurly.name          = Left Curly Brace Placement
LeftCurly.option        = policy on placement of a left curly brace ('{')
LeftCurly.ignoreEnums   = If true, Check will ignore enums when left curly brace policy is EOL
LeftCurly.tokens        = blocks to check

NeedBraces.desc   = Checks for braces around code blocks.
NeedBraces.name   = Need Braces
NeedBraces.tokens = blocks to check
NeedBraces.allowSingleLineStatement = allows single-line statements without braces
NeedBraces.allowEmptyLoopBody = allows loops with empty bodies

RightCurly.desc             = Checks the placement of right curly braces (<code>'}'</code>) for <code> else</code>, <code>try</code>, and <code>catch</code> tokens.<br/>\r\nThe policy to verify is specified using property <code>option</code>.
RightCurly.name             = Right Curly Brace Placement
RightCurly.option           = policy on placement of a right curly brace ('}')  \u0009
RightCurly.shouldStartLine  = should we check if '}'  starts line.
RightCurly.tokens           = blocks to check
