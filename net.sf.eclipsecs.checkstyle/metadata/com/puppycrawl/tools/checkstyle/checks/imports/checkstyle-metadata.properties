
AvoidStarImport.desc     = Checks that there are no import statements that use the * notation.<br/>\r\nRationale: Importing all classes from a package leads to tight coupling between packages and might lead to problems when a new version of a library introduces name clashes.
AvoidStarImport.excludes = packages where star imports are allowed. Note that this property is not recursive, subpackages of excluded packages are not automatically excluded.
AvoidStarImport.name     = Avoid Star (Demand) Imports
AvoidStarImport.allowClassImports = Whether to allow starred class imports like import <code>java.util.*;</code>.
AvoidStarImport.allowStaticMemberImports = Whether to allow starred static member imports like <code>import static org.junit.Assert.*;</code>.

AvoidStaticImport.desc     = Checks that there are no static import statements.<br/>\r\nRationale: Importing static members can lead to naming conflicts between class' members. It may lead to poor code readability since it may no longer be clear what class a member resides in (without looking at the import statement).
AvoidStaticImport.excludes = Allows for certain classes via a star notation to be excluded such as <code>java.lang.Math.*</code> or specific static members to be excluded like <code>java.lang.System.out</code> for a variable or <code>java.lang.Math.random</code> for a method.<br/>\r\nIf you exclude a starred import on a class this automatically excludes each member individually.<br/>\r\nFor example: Excluding <code>java.lang.Math.*.</code> will allow the import of each static member in the Math class individually like <code>java.lang.Math.PI</code>.
AvoidStaticImport.name     = Avoid Static Imports

IllegalImport.desc        = Checks for imports from a set of illegal packages. By default, the check rejects all <code>sun.*</code> packages since programs that contain direct calls to the sun.* packages are <a href="http://java.sun.com/products/jdk/faq/faq-sun-packages.html" target="_blank">not 100% Pure Java</a>. To reject other packages, set property <code>illegalPkgs</code> to a list of the illegal packages.
IllegalImport.illegalPkgs = Comma (',') separated list of illegal packages.
IllegalImport.name        = Illegal Imports
IllegalImport.illegalClasses = Class names to reject, if regexp variable is not set, checks if import equals class name. If regexp variable is set, then list of class name will be interpreted as regular expressions. Note, all properties for match will be used.
IllegalImport.regexp = Whether the <b>illegalPkgs</b> and <b>illegalClasses</b> should be interpreted as regular expressions

ImportControl.desc = Controls what can be imported in each package. Useful for ensuring that application layering rules are not violated, especially on large projects.<br/>\r\nThe DTD for a import control XML document is at http://checkstyle.org/dtds/import_control_1_0.dtd. It contains documentation on each of the elements and attributes.<br/>\r\nThe check validates a XML document when it loads the document. To validate against the above DTD, include the following document type declaration in your XML document:\r\n<pre>\r\n<!DOCTYPE import-control PUBLIC\r\n    "-//Checkstyle//DTD Import Control 1.0//EN"\r\n    "http:/checkstyle.org/dtds/import_control_1_0.dtd">\r\n</pre>\r\n
ImportControl.name = Import Control
ImportControl.file = The location of the file containing the import control configuration. It can be a regular file, URL or resource path. It will try loading the path as a URL first, then as a file, and finally as a resource. 
ImportControl.path = Regular expression of file paths to which this check should apply. Files that don't match the pattern will not be checked. The pattern will be matched against the full absolute file path. 

ImportOrder.caseSensitive = whether String comparison should be case sensitive or not
ImportOrder.desc          = Checks the ordering/grouping of imports. Ensures that groups of imports come in a specific order (e.g., java. comes first, javax. comes first, then everything else) and imports within each group are in lexicographic order. Static imports must be at the end of a group and in lexicographic order amongst themselves.
ImportOrder.groups        = list of imports groups (every group identified by string it's started)
ImportOrder.name          = Import Order Check
ImportOrder.option        = policy on the relative order between regular imports and static imports
ImportOrder.ordered       = whether imports within group should be sorted
ImportOrder.separated     = whether imports groups should be separated by, at least, one blank line
ImportOrder.separatedStaticGroups = whether static import groups should be separated by, at least, one blank line or comment and aren't separated internally. (This property has effect only when the property option is is set to top or bottom.)
ImportOrder.sortStaticImportsAlphabetically = whether static imports grouped by top or bottom option are sorted alphabetically or not
ImportOrder.staticGroups = list of static import groups (every group identified either by a common prefix string, or by a regular expression enclosed in forward slashes (e.g. /regexp/).\nAll static imports, which does not match any group, falls into an additional group, located at the end.\nThus, the empty list of static groups (the default value) means one group for all static imports.\n(This property has effect only when the property option is set to top or bottom.)
ImportOrder.useContainerOrderingForStatic = whether to use container ordering (Eclipse IDE term) for static imports or not
ImportOrder.tokens =  tokens to check

Imports.group = Imports

RedundantImport.desc = Checks for redundant import statements. An import statement is considered redundant if:\r\n<ul>\r\n<li>It is a duplicate of another import. This is, when a class is imported more than once.</li>\r\n<li>The class imported is from the java.lang package, e.g. importing java.lang.String.</li>\r\n<li>The class imported is from the same package.</li>\r\n</ul>
RedundantImport.name = Redundant Imports

UnusedImports.desc = Checks for unused import statements. Checkstyle uses a simple but very reliable algorithm to report on unused import statements. An import statement is considered unused if:\r\n<ul>\r\n<li>It is not referenced in the file. The algorithm does not support wild-card imports like <code>import java.io.*;</code>. Most IDE's provide very sophisticated checks for imports that handle wild-card imports.</li>\r\n<li>It is a duplicate of another import. This is when a class is imported more than once.</li>\r\n<li>The class imported is from the <code>java.lang</code> package. For example importing <code>java.lang.String</code>.</li>\r\n<li>The class imported is from the same package.</li>\r\n<li><b>Optionally:</b> it is referenced in Javadoc comments. This check is off by default, as it is considered bad practice to introduce a compile time dependency for documentation purposes only. As an example, the import java.util.Date would be considered referenced with the Javadoc comment {@link Date}. The alternative to avoid introducing a compile time dependency would be to write the Javadoc comment as {@link java.util.Date}.</li></ul>\r\n
UnusedImports.name = Unused Imports
UnusedImports.processJavadoc = Whether to process Javadoc

CustomImportOrder.name = Custom Import Order
CustomImportOrder.desc = Checks that the groups of import declarations appear in the order specified by the user. If there is an import but its group is not specified in the configuration such an import should be placed at the end of the import list.
CustomImportOrder.customImportOrderRules = List of order declaration customizing by user.
CustomImportOrder.standardPackageRegExp = RegExp for STANDARD_JAVA_PACKAGE group imports.
CustomImportOrder.thirdPartyPackageRegExp = RegExp for THIRDPARTY_PACKAGE group imports.
CustomImportOrder.specialImportsRegExp = RegExp for SPECIAL_IMPORTS group imports.
CustomImportOrder.separateLineBetweenGroups =    Force empty line separator between import groups.
CustomImportOrder.sortImportsInGroupAlphabetically = Force grouping alphabetically.