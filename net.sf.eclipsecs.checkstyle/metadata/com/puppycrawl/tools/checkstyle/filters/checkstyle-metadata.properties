
Filters.group = Filters

SeverityMatchFilter.acceptOnMatch = If acceptOnMatch is true, then the filter accepts an audit event if and only if there is a match between the event's severity level and property severity. If acceptOnMatch is false, then the filter accepts an audit event if and only if there is not a match between the event's severity level and property severity.
SeverityMatchFilter.desc          = Filter SeverityMatchFilter decides audit events according to the severity level of the event.
SeverityMatchFilter.name          = Severity Match Filter
SeverityMatchFilter.severity      = the severity level of this filter.

SuppressWithNearbyCommentFilter.checkC          = whether to check C style comments (/* ... */)
SuppressWithNearbyCommentFilter.checkCPP        = whether to check C++ style comments (//)
SuppressWithNearbyCommentFilter.checkFormat     = check pattern to suppress.
SuppressWithNearbyCommentFilter.commentFormat   = comment pattern to trigger filter to begin suppression.
SuppressWithNearbyCommentFilter.desc            = Filter <code>SuppressWithNearbyCommentFilter</code> uses individual comments to suppress audit events.<br/>\r\n<br/><br/>\r\nRationale: Same as SuppressionCommentFilter. Whereas the SuppressionCommentFilter uses matched pairs of filters to turn on/off comment matching, SuppressWithNearbyCommentFilter uses single comments. This requires fewer lines to mark a region, and may be aesthetically preferable in some contexts.\r\n<br/><br/>\r\nUsage: This filter only works in conjunction with a FileContentsHolder, since that check makes the suppression comments in the .java files available sub rosa. A configuration that includes this filter must configure FileContentsHolder as a child module of TreeWalker. 
SuppressWithNearbyCommentFilter.influenceFormat = a negative/zero/positive value that defines the number of lines preceding/at/following the suppression comment 
SuppressWithNearbyCommentFilter.messageFormat   = message pattern to suppress.
SuppressWithNearbyCommentFilter.name            = Suppress With Nearby Comment Filter

SuppressionCommentFilter.checkC           = whether to check C style comments (/* ... */)
SuppressionCommentFilter.checkCPP         = whether to check C++ style comments (//)
SuppressionCommentFilter.checkFormat      = check pattern to suppress.
SuppressionCommentFilter.desc             = Filter <code>SuppressionCommentFilter</code> uses pairs of comments to suppress audit events.<br/>\r\nRationale: Sometimes there are legitimate reasons for violating a check. When this is a matter of the code in question and not personal preference, the best place to override the policy is in the code itself. Semi-structured comments can be associated with the check. This is sometimes superior to a separate suppressions file, which must be kept up-to-date as the source file is edited.
SuppressionCommentFilter.messageFormat    = message pattern to suppress.
SuppressionCommentFilter.name             = Suppression Comment Filter
SuppressionCommentFilter.offCommentFormat = comment pattern to trigger filter to begin suppression.
SuppressionCommentFilter.onCommentFormat  = comment pattern to trigger filter to end suppression.

SuppressionFilter.desc = Filter <code>SuppressionFilter</code> rejects audit events for Check errors according to a <a href="http://checkstyle.sourceforge.net/config.html#XML%20Details" target="_blank">suppressions XML document</a> in a file. If there is no configured suppressions file, the Filter accepts all audit events.
SuppressionFilter.file = the location of the suppressions XML document file. The location can either be a filesystem location, or a name passed to the ClassLoader.getResource() method.
SuppressionFilter.name = Suppression Filter
SuppressionFilter.optional = Tells what to do when the file is not existing. If optional is set to false the file must exist, or else it ends with error. On the other hand if optional is true and file is not found, the filter accept all audit events.

SuppressWarningsFilter.name = SuppressWarnings Filter
SuppressWarningsFilter.desc =  Filter SuppressWarningsFilter uses annotations to suppress audit events.<br/><br/>Rationale: Same as for SuppressionCommentFilter. In the contrary to it here, comments are not used comments but the builtin syntax of @SuppressWarnings. This can be perceived as a more elegant solution than using comments. Also this approach maybe supported by various IDE.<br/>Usage: This filter only works in conjunction with a SuppressWarningsHolder, since that check finds the annotations in the Java files and makes them available for the filter. Because of that, a configuration that includes this filter must also include SuppressWarningsHolder as a child module of the TreeWalker. 

SuppressWithPlainTextCommentFilter.name             = Suppression With Plain Text Comment Filter
SuppressWithPlainTextCommentFilter.desc             = Filter <code>SuppressWithPlainTextCommentFilter</code> uses plain text to suppress audit events. The filter can be used only to suppress audit events received from the checks which implement FileSetCheck interface. In other words, the checks which have Checker as a parent module. The filter knows nothing about AST, it treats only plain text comments and extracts the information required for suppression from the plain text comments. Currently the filter supports only single line comments.<br/><br/>Please, be aware of the fact that, it is not recommended to use the filter for Java code anymore, however you still are able to use it to suppress audit events received from the checks which implement FileSetCheck interface.<br/><br/><b>Rationale:</b> Sometimes there are legitimate reasons for violating a check. When this is a matter of the code in question and not personal preference, the best place to override the policy is in the code itself. Semi-structured comments can be associated with the check. This is sometimes superior to a separate suppressions file, which must be kept up-to-date as the source file is edited.<br/><br/>Note that the suppression comment should be put before the violation. You can use more than one suppression comment each on separate line. 
SuppressWithPlainTextCommentFilter.offCommentFormat = comment pattern to trigger filter to begin suppression.
SuppressWithPlainTextCommentFilter.onCommentFormat  = comment pattern to trigger filter to end suppression.
SuppressWithPlainTextCommentFilter.checkFormat      = check pattern to suppress.
SuppressWithPlainTextCommentFilter.messageFormat    = message pattern to suppress.

SuppressionXpathFilter.name = Suppression Xpath Filter
SuppressionXpathFilter.desc = Filter SuppressionXpathFilter works as SuppressionFilter. Additionally, filter processes suppress-xpath elements, which contains xpath-expressions. Xpath-expressions are queries for suppressed nodes inside the AST tree.
SuppressionXpathFilter.file =  the location of the suppressions XML document file. The order the location is checked is:<ol><li>as a filesystem location</li><li>if no file found, and the location starts with either http:// or https://, then it is interpreted as a URL</li><li>if no file found, then passed to the ClassLoader.getResource() method.</li></ol>
SuppressionXpathFilter.optional = Tells what to do when the file is not existing. If optional is set to false the file must exist, or else it ends with error. On the other hand if optional is true and file is not found, the filter accept all audit events.
